{"version":3,"sources":["todoapp/core.cljs"],"mappings":"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","names":["todoapp.core/router","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","todoapp.core/path-for","p__63628","vec__63629","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq63626","G__63627","cljs.core/first","cljs.core/next","self__4717__auto__","route","params","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$3","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$2","todoapp.core/home-page","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__63632","vec__63633","db","_","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__63636","vec__63637","index","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__63641","vec__63642","name","p1__63640#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__63646","map__63647","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p1__63645#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/count","todoapp.core/query-tasks","todoapp.core/query-num","G__63649","G__63650","re-frame.core/reg-sub","G__63651","G__63652","task-name","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","p1__63653#","todoapp.core/add-todo","cljs.core/reset!","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__63654","re-frame.core/dispatch","G__63655","p__63656","map__63657","todoapp.core/todo-chkbx","item-id","task","finished","G__63659","todoapp.core.path_for.cljs$core$IFn$_invoke$arity$variadic","todoapp.core/delete-completed","G__63660","tasks","G__63661","re-frame.core/subscribe","num-tasks","G__63662","todoapp.core/items-page","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__63664","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__63666","cljs.core/chunk-buffer","i__63665","vec__63667","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63663","cljs.core/chunk-rest","vec__63670","cljs.core/cons","cljs.core/rest","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","todoapp.core/item-page","routing-data","reagent.session/get","item","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","todoapp.core/about-page","todoapp.core/page-for","G__63673","cljs.core/Keyword","js/Error","todoapp.core/current-page","page","todoapp.core/mount-root","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","js/document","G__63674","todoapp.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","cljs.core/chunk-first"],"sourcesContent":["(ns todoapp.core\r\n  (:require\r\n   [re-frame.core :as rf]\r\n   [reagent.core :as reagent :refer [atom]]\r\n   [reagent.dom :as rdom]\r\n   [reagent.session :as session]\r\n   [reitit.frontend :as reitit]\r\n   [clerk.core :as clerk]\r\n   [accountant.core :as accountant]))\r\n;; -------------------------\r\n;; Routes\r\n(def router\r\n  (reitit/router\r\n   [[\"/\" :index]\r\n    [\"/items\"\r\n     [\"\" :items]\r\n     [\"/:item-id\" :item]]\r\n    [\"/about\" :about]]))\r\n\r\n(defn path-for [route & [params]]\r\n  (if params\r\n    (:path (reitit/match-by-name router route params))\r\n    (:path (reitit/match-by-name router route))))\r\n\r\n;; -------------------------\r\n;; Page components\r\n(defn home-page []\r\n  (fn []\r\n    [:span.main\r\n     [:h1 \"Welcome to TODO APP\"]\r\n     [:ul\r\n      [:li [:a {:href (path-for :items)} \"tasks for today\"]]]]))\r\n\r\n;initializes the app-db with the following values\r\n(rf/reg-event-db\r\n :init-db\r\n (fn [db [_]]\r\n   (assoc db :task-list [] :num-tasks 1)\r\n   )\r\n )\r\n\r\n;toggles the :finished state from true <-> false\r\n(rf/reg-event-db\r\n  :toggle\r\n  (fn [db [_ index]]\r\n    (update-in db [:task-list index :finished] not)))\r\n\r\n;adds new task into :task-list\r\n(rf/reg-event-db\r\n :add-task\r\n (fn [db [_ name]]\r\n   (update db :task-list #(conj % (assoc {} :task name :finished false)))))\r\n\r\n;increase the number of tasks by 1\r\n(rf/reg-event-db\r\n :inc-tasks\r\n (fn [db]\r\n   (update db :num-tasks inc)))\r\n\r\n;deletes all completed tasks from db\r\n(rf/reg-event-fx\r\n :delete-completed\r\n (fn [{:keys [db]}]\r\n   {:db (->> (get db :task-list)\r\n         (filter #(false? (get % :finished)))\r\n         (assoc db :task-list))\r\n    :dispatch [:update-num-tasks]}\r\n   ))\r\n\r\n;updates num tasks after all completed tasks have been cleared\r\n(rf/reg-event-db\r\n :update-num-tasks\r\n (fn [db]\r\n   (assoc db :num-tasks (inc (count (get db :task-list))))))\r\n\r\n(defn query-tasks [db]\r\n  (get db :task-list)\r\n  )\r\n\r\n(defn query-num [db]\r\n  (get db :num-tasks))\r\n\r\n(rf/reg-sub\r\n :get-tasklist\r\n query-tasks)\r\n\r\n(rf/reg-sub\r\n :get-numtasks\r\n query-num\r\n)\r\n\r\n;; a form for the user to submit\r\n  (let [task-name (atom \"\")]\r\n    (defn add-todo []\r\n      [:div\r\n       [:div\r\n        [:input {:type \"text\"\r\n                 :placeholder \"Please enter details of the task to insert.\"\r\n                 :value @task-name\r\n                 :on-change #(reset! task-name (-> % .-target .-value))}]]\r\n       [:div\r\n        [:input {:type \"button\"\r\n                 :value \"+ add a new task\"\r\n                 :on-click #(if (not (= @task-name \"\"))\r\n                               (do\r\n                                 (rf/dispatch [:add-task @task-name])\r\n                                 (rf/dispatch [:inc-tasks])\r\n                                 (reset! task-name \"\"))\r\n                               ())}]]]))\r\n\r\n  (defn todo-chkbx [item-id {:keys [task finished]}]\r\n    [:ul\r\n     [:input {:type \"checkbox\"\r\n              :checked finished\r\n              :on-click #(rf/dispatch [:toggle item-id])}]\r\n     [:a {:href (path-for :item {:item-id item-id})} task]])\r\n  \r\n  (defn delete-completed []\r\n    [:input {:type \"button\"\r\n             :value \"clear completed\"\r\n             :on-click #(rf/dispatch [:delete-completed])}])\r\n\r\n  (let [tasks (rf/subscribe [:get-tasklist])\r\n        num-tasks (rf/subscribe [:get-numtasks])]\r\n    \r\n    (defn items-page []\r\n    [:div\r\n     [:div\r\n      [:h1 \"You have \" (dec @num-tasks) \" tasks.\"]]\r\n     [:div\r\n      [:ul (doall (for [[item-id task] (map-indexed list @tasks)]\r\n                    ^{:key item-id}\r\n                    [todo-chkbx item-id task]))]\r\n      [add-todo]\r\n      [delete-completed]]]))\r\n\r\n(defn item-page []\r\n  (fn []\r\n    (let [routing-data (session/get :route)\r\n          item (get-in routing-data [:route-params :item-id])]\r\n      [:span.main\r\n       [:h1 (str \"TASK \" item)]\r\n       [:p [:a {:href (path-for :items)} \"Back to the list of tasks\"]]])))\r\n\r\n(defn about-page []\r\n  (fn [] [:span.main\r\n          [:h1 \"About TODO APP\"]]))\r\n\r\n;; -------------------------\r\n;; Translate routes -> page components\r\n(defn page-for [route]\r\n  (case route\r\n    :index #'home-page\r\n    :about #'about-page\r\n    :items #'items-page\r\n    :item #'item-page))\r\n\r\n;; -------------------------\r\n;; Page mounting component\r\n(defn current-page []\r\n  (fn []\r\n    (let [page (:current-page (session/get :route))]\r\n      [:div\r\n       [:header\r\n        [:p [:a {:href (path-for :index)} \"Home\"] \" | \"\r\n         [:a {:href (path-for :about)} \"About todoapp\"]]]\r\n       [page]\r\n       [:footer\r\n        [:p \"todoapp was generated by the \"\r\n         [:a {:href \"https://github.com/reagent-project/reagent-template\"} \"Reagent Template\"] \".\"]]])))\r\n\r\n;; -------------------------\r\n;; Initialize app\r\n\r\n(defn mount-root []\r\n  (rdom/render [current-page] (.getElementById js/document \"app\"))\r\n  (rf/dispatch [:init-db]))\r\n\r\n(defn init! []\r\n  (clerk/initialize!)\r\n  (accountant/configure-navigation!\r\n   {:nav-handler\r\n    (fn [path]\r\n      (let [match (reitit/match-by-path router path)\r\n            current-page (:name (:data  match))\r\n            route-params (:path-params match)]\r\n        (reagent/after-render clerk/after-render!)\r\n        (session/put! :route {:current-page (page-for current-page)\r\n                              :route-params route-params})\r\n        (clerk/navigate-page! path)))\r\n    :path-exists?\r\n    (fn [path]\r\n      (boolean (reitit/match-by-path router path)))})\r\n  (accountant/dispatch-current!)\r\n  (mount-root))\r\n"]}