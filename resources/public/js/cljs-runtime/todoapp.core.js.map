{"version":3,"sources":["todoapp/core.cljs"],"mappings":"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","names":["todoapp.core/router","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","todoapp.core/path-for","p__80751","vec__80752","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq80749","G__80750","cljs.core/first","cljs.core/next","self__4717__auto__","route","params","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$3","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$2","todoapp.core/home-page","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__80755","p__80756","map__80757","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__80758","db","_","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__80762","re-frame.core/dispatch","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__80763","vec__80764","ajax.core/json-request-format","ajax.core/raw-response-format","p__80767","vec__80768","id","p__80771","vec__80772","completed","p__80775","vec__80776","name","G__80779","ajax.core/json-response-format","p__80780","map__80781","G__80783","p__80784","vec__80785","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__80788","p__80789","vec__80790","response","p__80793","vec__80794","js/alert","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core/count","todoapp.core/query-tasks","todoapp.core/query-num","G__80797","G__80798","re-frame.core/reg-sub","G__80799","G__80800","task-name","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","p1__80801#","todoapp.core/add-todo","cljs.core/reset!","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__80802","G__80803","p__80804","map__80805","todoapp.core/todo-chkbx","item-id","item","G__80807","cljs.core/not","todoapp.core.path_for.cljs$core$IFn$_invoke$arity$variadic","p__80808","map__80809","todoapp.core/delete-one","G__80811","todoapp.core/delete-completed","G__80812","todoapp.core/display-task","task","tasks","G__80813","re-frame.core/subscribe","num-tasks","G__80814","todoapp.core/items-page","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__80816","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__80818","cljs.core/chunk-buffer","i__80817","vec__80819","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80815","cljs.core/chunk-rest","vec__80822","cljs.core/cons","cljs.core/rest","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","todoapp.core/item-page","routing-data","reagent.session/get","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","todoapp.core/about-page","todoapp.core/page-for","G__80825","cljs.core/Keyword","js/Error","todoapp.core/current-page","page","todoapp.core/mount-root","reagent.dom.render.cljs$core$IFn$_invoke$arity$2","js/document","G__80826","todoapp.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","cljs.core/chunk-first"],"sourcesContent":["(ns todoapp.core\r\n  (:require\r\n   [ajax.core :as ajax];to create a connection to SQL database\r\n   [day8.re-frame.http-fx]\r\n   [re-frame.core :as rf]\r\n   [reagent.core :as reagent :refer [atom]]\r\n   [reagent.dom :as rdom]\r\n   [reagent.session :as session]\r\n   [reitit.frontend :as reitit]\r\n   [clerk.core :as clerk]\r\n   [accountant.core :as accountant]))\r\n;; -------------------------\r\n;; Routes\r\n(def router\r\n  (reitit/router\r\n   [[\"/\" :index]\r\n    [\"/items\"\r\n     [\"\" :items]\r\n     [\"/:item-id\" :item]]\r\n    [\"/about\" :about]]))\r\n\r\n(defn path-for [route & [params]]\r\n  (if params\r\n    (:path (reitit/match-by-name router route params))\r\n    (:path (reitit/match-by-name router route))))\r\n\r\n;; -------------------------\r\n;; Page components\r\n(defn home-page []\r\n  (fn []\r\n    [:span.main\r\n     [:h1 \"Welcome to TODO APP\"]\r\n     [:ul\r\n      [:li [:a {:href (path-for :items)} \"tasks for today\"]]]]))\r\n\r\n(rf/reg-event-db\r\n :init-db\r\n (fn [{:keys [db]} [_]]\r\n   :db (assoc db :task-list (rf/dispatch [:get-tasks]) :num-tasks 1)))\r\n\r\n(rf/reg-event-fx\r\n :delete-completed\r\n (fn [db [_]]\r\n   {:http-xhrio {:method           :delete\r\n                 :uri              \"http://localhost:3000/api/todos/all\"\r\n                 :format           (ajax/json-request-format)\r\n                ;;  :response-format  (ajax/json-response-format {:keywords? true})\r\n                 :response-format  (ajax/raw-response-format)\r\n                 :on-success       [:refresh-db]\r\n                 :on-failure       [:generic-failure]}}))\r\n\r\n(rf/reg-event-fx\r\n :delete-one\r\n (fn [db [_ id]]\r\n   {:http-xhrio {:method           :delete\r\n                 :uri              \"http://localhost:3000/api/todos\"\r\n                 :params           {:id id}\r\n                 :format           (ajax/json-request-format)\r\n                ;;  :response-format  (ajax/json-response-format {:keywords? true})\r\n                 :response-format  (ajax/raw-response-format)\r\n                 :on-success       [:refresh-db]\r\n                 :on-failure       [:generic-failure]}}))\r\n\r\n(rf/reg-event-fx\r\n :toggle\r\n (fn [db [_ id completed]]\r\n   {:http-xhrio {:method           :put\r\n                 :uri              \"http://localhost:3000/api/todos\"\r\n                 :params           {:id id\r\n                                    :completed completed}\r\n                 :format           (ajax/json-request-format)\r\n                ;;  :response-format  (ajax/json-response-format {:keywords? true})\r\n                 :response-format  (ajax/raw-response-format)\r\n                 :on-success       [:refresh-db]\r\n                 :on-failure       [:generic-failure]}}))\r\n\r\n(rf/reg-event-fx\r\n :add-task\r\n (fn\r\n   [db [_ name]]\r\n   ;;return a map of side effects\r\n   {:http-xhrio {:method           :post\r\n                 :uri              \"http://localhost:3000/api/todos\"\r\n                 :params           {:item name\r\n                                    :completed false}\r\n                 :format           (ajax/json-request-format)\r\n                 :response-format  (ajax/json-response-format {:keywords? true})\r\n                 :on-success       [:refresh-db]\r\n                 :on-failure       [:generic-failure]}}))\r\n\r\n(rf/reg-event-fx\r\n :get-tasks\r\n (fn\r\n   [{:keys [db]} _]\r\n   ;;return a map of side effects\r\n   {:http-xhrio {:method           :get\r\n                 :uri              \"http://localhost:3000/api/todos\"\r\n                 :format           (ajax/json-request-format)\r\n                 :response-format  (ajax/json-response-format {:keywords? true})\r\n                 :on-success       [:success-get]\r\n                 :on-failure       [:generic-failure]}}))\r\n\r\n;; replaces rf's local db with the data in the sql db\r\n(rf/reg-event-db\r\n :refresh-db\r\n (fn\r\n   [db [_]]\r\n   :db (assoc db :task-list (rf/dispatch [:get-tasks]))))\r\n\r\n(rf/reg-event-db\r\n :success-get\r\n (fn\r\n   [db [_ response]]\r\n  ;;  (assoc db :task-list (into [] (map #(dissoc % :id) response)))\r\n   (assoc db :task-list response)))\r\n\r\n(rf/reg-event-db\r\n :generic-failure\r\n (fn\r\n   [db [_ response]]\r\n   (js/alert response)\r\n   (js/alert \"failure\")))\r\n\r\n;increase the number of tasks by 1\r\n(rf/reg-event-db\r\n :inc-tasks\r\n (fn [db]\r\n   (update db :num-tasks inc)))\r\n\r\n;deletes all completed tasks from db\r\n;; (rf/reg-event-fx\r\n;;  :delete-completed\r\n;;  (fn [{:keys [db]}]\r\n;;    {:db (->> (get db :task-list)\r\n;;              (filter #(false? (get % :completed)))\r\n;;              (assoc db :task-list))\r\n;;     :dispatch [:update-num-tasks]}))\r\n\r\n;updates num tasks after all completed tasks have been cleared\r\n(rf/reg-event-db\r\n :update-num-tasks\r\n (fn [db]\r\n   (assoc db :num-tasks (inc (count (get db :task-list))))))\r\n\r\n(defn query-tasks [db]\r\n  (get db :task-list))\r\n\r\n(defn query-num [db]\r\n  (get db :num-tasks))\r\n\r\n(rf/reg-sub\r\n :get-tasklist\r\n query-tasks)\r\n\r\n(rf/reg-sub\r\n :get-numtasks\r\n query-num)\r\n\r\n;; a form for the user to submit\r\n(let [task-name (atom \"\")]\r\n  (defn add-todo []\r\n    [:div\r\n     [:div\r\n      [:input {:type \"text\"\r\n               :placeholder \"Please enter details of the task to insert.\"\r\n               :value @task-name\r\n               :on-change #(reset! task-name (-> % .-target .-value))}]]\r\n     [:div\r\n      [:input {:type \"button\"\r\n               :value \"+ add a new task\"\r\n               :on-click #(if (not (= @task-name \"\"))\r\n                            (do\r\n                              (rf/dispatch [:add-task @task-name])\r\n                              (rf/dispatch [:inc-tasks])\r\n                              (reset! task-name \"\"))\r\n                            ())}]]]))\r\n\r\n(defn todo-chkbx [item-id {:keys [id item completed]}]\r\n  [:ul\r\n   [:input {:type \"checkbox\"\r\n            :checked completed\r\n            :on-change #(rf/dispatch [:toggle id (not completed)])}]\r\n   [:a {:href (path-for :item {:item-id item-id})} item]])\r\n\r\n(defn delete-one [{:keys [id _]}]\r\n  [:ul\r\n   [:input {:type \"button\"\r\n            :value \"delete\"\r\n            :on-click #(rf/dispatch [:delete-one id])}]])\r\n\r\n(defn delete-completed []\r\n  [:input {:type \"button\"\r\n           :value \"clear completed\"\r\n           :on-click #(rf/dispatch [:delete-completed])}])\r\n\r\n(defn display-task [item-id task]\r\n  [:ul [todo-chkbx item-id task] [delete-one task]])\r\n\r\n(let [tasks (rf/subscribe [:get-tasklist])\r\n      num-tasks (rf/subscribe [:get-numtasks])]\r\n\r\n  (defn items-page []\r\n    [:div\r\n     [:div\r\n      [:h1 \"You have \" (dec @num-tasks) \" tasks.\"]]\r\n     [:div\r\n      [:ul (doall (for [[item-id task] (map-indexed list @tasks)]\r\n                    ^{:key item-id}\r\n                    [display-task item-id task]))]\r\n      [add-todo]\r\n      [delete-completed]]]))\r\n\r\n(defn item-page []\r\n  (fn []\r\n    (let [routing-data (session/get :route)\r\n          item (get-in routing-data [:route-params :item-id])]\r\n      [:span.main\r\n       [:h1 (str \"TASK \" item)]\r\n       [:p [:a {:href (path-for :items)} \"Back to the list of tasks\"]]])))\r\n\r\n(defn about-page []\r\n  (fn [] [:span.main\r\n          [:h1 \"About TODO APP\"]]))\r\n\r\n;; -------------------------\r\n;; Translate routes -> page components\r\n(defn page-for [route]\r\n  (case route\r\n    :index #'home-page\r\n    :about #'about-page\r\n    :items #'items-page\r\n    :item #'item-page))\r\n\r\n;; -------------------------\r\n;; Page mounting component\r\n(defn current-page []\r\n  (fn []\r\n    (let [page (:current-page (session/get :route))]\r\n      [:div\r\n       [:header\r\n        [:p [:a {:href (path-for :index)} \"Home\"] \" | \"\r\n         [:a {:href (path-for :about)} \"About todoapp\"]]]\r\n       [page]\r\n       [:footer\r\n        [:p \"todoapp was generated by the \"\r\n         [:a {:href \"https://github.com/reagent-project/reagent-template\"} \"Reagent Template\"] \".\"]]])))\r\n\r\n;; -------------------------\r\n;; Initialize app\r\n\r\n(defn mount-root []\r\n  (rdom/render [current-page] (.getElementById js/document \"app\"))\r\n  (rf/dispatch [:init-db]))\r\n\r\n(defn init! []\r\n  (clerk/initialize!)\r\n  (accountant/configure-navigation!\r\n   {:nav-handler\r\n    (fn [path]\r\n      (let [match (reitit/match-by-path router path)\r\n            current-page (:name (:data  match))\r\n            route-params (:path-params match)]\r\n        (reagent/after-render clerk/after-render!)\r\n        (session/put! :route {:current-page (page-for current-page)\r\n                              :route-params route-params})\r\n        (clerk/navigate-page! path)))\r\n    :path-exists?\r\n    (fn [path]\r\n      (boolean (reitit/match-by-path router path)))})\r\n  (accountant/dispatch-current!)\r\n  (mount-root))\r\n"]}