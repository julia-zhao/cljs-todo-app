{"version":3,"sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.env","js/shadow.cljs.devtools.client.env.runtime-id","shadow.cljs.devtools.client.env/runtime-id","cljs.core/random-uuid","goog/define","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.env/module-format","shadow.cljs.devtools.client.env/reload-with-state","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/repl-pprint","shadow.cljs.devtools.client.env/use-document-host","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/ignore-warnings","shadow.cljs.devtools.client.env/devtools-info","shadow.cljs.devtools.client.env/get-server-host","and__4109__auto__","js/goog.global.document","js/goog.global.document.location","cljs.core/seq","js/goog.global.document.location.hostname","js/document.location.hostname","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/get-ws-url-base","clojure.string/replace","js/Error","shadow.cljs.devtools.client.env/ws-url","runtime-type","cljs.core/Keyword","cljs.core/name","shadow.cljs.devtools.client.env/ws-listener-url","client-type","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-print-fn","cljs.core/not","cljs.core/pr-str","obj","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__65425","cljs.core/*print-newline*","*print-fn*-orig-val__65426","cljs.core/*print-fn*","*print-newline*-temp-val__65427","*print-fn*-temp-val__65428","x__4662__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/repl-error","e","G__65433","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/shadow.cljs.devtools.client.env.repl-results-ref","shadow.cljs.devtools.client.env/repl-results-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","e65434","result-id","result","ret","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/Date.now","cljs.core/*3","cljs.core/*2","cljs.core/*1","e65435","printed","cljs.core/assoc-in","js/console.log","cljs.core/*e","js/shadow.cljs.devtools.client.env.reset-print-fn-ref","shadow.cljs.devtools.client.env/reset-print-fn-ref","shadow.cljs.devtools.client.env/set-print-fns!","msg-fn","original-print-fn","original-print-err-fn","cljs.core/*print-err-fn*","cljs.core/reset!","cljs.core/set-print-fn!","cljs.core/set-print-err-fn!","args","G__65437","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__65441","shadow.cljs.devtools.client.env/reset-print-fns!","temp__5735__auto__","cljs.core/deref","x","shadow.cljs.devtools.client.env/process-ws-msg","text","handler","*default-data-reader-fn*-orig-val__65448","*default-data-reader-fn*-temp-val__65449","cljs.tools.reader/*default-data-reader-fn*","tag","value","e65451","msg","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/console.warn","p__65455","p__65456","map__65457","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__65458","shadow.cljs.devtools.client.env/make-task-fn","log-missing-fn","log-call-async","log-call","fn-sym","fn-str","async","next","e65461","fn-obj","js/goog.getObjectByName","js/$CLJS","ex","p__65463","vec__65464","seq__65465","first__65466","cljs.core/first","cljs.core/next","shadow.cljs.devtools.client.env/do-js-reload*","failure-fn","task","remaining-tasks","e65467","G__65468","var_args","G__65476","shadow.cljs.devtools.client.env/do-js-reload","p__65477","map__65478","load-code-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","complete-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","error","remaining","reload-info","load-tasks","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__65469#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__65470#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__65481","map__65482","shadow.cljs.devtools.client.env/before-load-src","type","ns","src","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","seq__65484","chunk__65485","count__65486","i__65487","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","js/goog.global.SHADOW_NS_RESET","js/shadow.cljs.devtools.client.env.custom-msg-subscribers-ref","shadow.cljs.devtools.client.env/custom-msg-subscribers-ref","shadow.cljs.devtools.client.env/subscribe!","sub-id","callback","shadow.cljs.devtools.client.env/publish!","seq__65495","chunk__65496","count__65497","i__65498","vec__65507","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__65511","id","e65510","e65514"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n;; FIXME: make this persistent somehow?\n(defonce runtime-id (str (random-uuid)))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define server-host \"\")\n\n(goog-define server-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn devtools-info []\n  #js {:server-port server-port\n       :server-host server-host\n       :build-id build-id\n       :proc-id proc-id\n       :runtime-id runtime-id})\n\n(defn get-server-host []\n  (cond\n    (and use-document-host\n         js/goog.global.document\n         js/goog.global.document.location\n         (seq js/goog.global.document.location.hostname))\n    js/document.location.hostname\n\n    (seq server-host)\n    server-host\n\n    :else\n    \"localhost\"))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-server-host) \":\" server-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [runtime-type]\n  {:pre [(keyword? runtime-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" runtime-id \"/\" (name runtime-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defonce repl-results-ref (atom {}))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result-id (str (random-uuid))\n          result {:type :repl/result\n                  :result-id result-id}\n          ret (repl-expr)]\n\n      ;; FIXME: this needs some kind of GC, shouldn't keep every single result forever\n      (swap! repl-results-ref assoc result-id {:timestamp (js/Date.now)\n                                               :result ret})\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n        (let [printed (repl-print-fn ret)]\n          (swap! repl-results-ref assoc-in [result-id :printed] printed)\n          (assoc result :value printed))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [failure-fn [task & remaining-tasks]]\n  (when task\n    (try\n      (task #(do-js-reload* failure-fn remaining-tasks))\n      (catch :default e\n        (failure-fn e task remaining-tasks)))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     (fn [])))\n  ([msg load-code-fn complete-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     complete-fn\n     (fn [error task remaining]\n       (js/console.warn \"JS reload failed\" error))))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn failure-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* failure-fn load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n\n(defonce custom-msg-subscribers-ref (atom {}))\n\n(defn subscribe! [sub-id callback]\n  (swap! custom-msg-subscribers-ref assoc sub-id callback))\n\n(defn publish! [msg]\n  (doseq [[id callback] @custom-msg-subscribers-ref]\n    (try\n      (callback msg)\n      (catch :default e\n        (js/console.warn \"failed to handle custom msg\" id msg)))))\n"]}