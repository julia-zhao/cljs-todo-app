["^ ","~:output",["^ ","~:js","goog.provide('cljs.core.async.impl.protocols');\r\ngoog.require('cljs.core');\r\ncljs.core.async.impl.protocols.MAX_QUEUE_SIZE = (1024);\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.ReadPort = function(){};\r\n\r\nvar cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn_53246 = (function (port,fn1_handler){\r\nvar x__4422__auto__ = (((port == null))?null:port);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$2(port,fn1_handler) : m__4423__auto__.call(null,port,fn1_handler));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.take_BANG_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$2(port,fn1_handler) : m__4420__auto__.call(null,port,fn1_handler));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"ReadPort.take!\",port);\r\n}\r\n}\r\n});\r\n/**\r\n * derefable val if taken, nil if take was enqueued\r\n */\r\ncljs.core.async.impl.protocols.take_BANG_ = (function cljs$core$async$impl$protocols$take_BANG_(port,fn1_handler){\r\nif((((!((port == null)))) && ((!((port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)))))){\r\nreturn port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port,fn1_handler);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn_53246(port,fn1_handler);\r\n}\r\n});\r\n\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.WritePort = function(){};\r\n\r\nvar cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn_53254 = (function (port,val,fn1_handler){\r\nvar x__4422__auto__ = (((port == null))?null:port);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$3(port,val,fn1_handler) : m__4423__auto__.call(null,port,val,fn1_handler));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.put_BANG_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$3(port,val,fn1_handler) : m__4420__auto__.call(null,port,val,fn1_handler));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"WritePort.put!\",port);\r\n}\r\n}\r\n});\r\n/**\r\n * derefable boolean (false if already closed) if handled, nil if put was enqueued.\r\n *                             Must throw on nil val.\r\n */\r\ncljs.core.async.impl.protocols.put_BANG_ = (function cljs$core$async$impl$protocols$put_BANG_(port,val,fn1_handler){\r\nif((((!((port == null)))) && ((!((port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)))))){\r\nreturn port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port,val,fn1_handler);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn_53254(port,val,fn1_handler);\r\n}\r\n});\r\n\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.Channel = function(){};\r\n\r\nvar cljs$core$async$impl$protocols$Channel$close_BANG_$dyn_53270 = (function (chan){\r\nvar x__4422__auto__ = (((chan == null))?null:chan);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(chan) : m__4423__auto__.call(null,chan));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.close_BANG_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(chan) : m__4420__auto__.call(null,chan));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Channel.close!\",chan);\r\n}\r\n}\r\n});\r\ncljs.core.async.impl.protocols.close_BANG_ = (function cljs$core$async$impl$protocols$close_BANG_(chan){\r\nif((((!((chan == null)))) && ((!((chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)))))){\r\nreturn chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Channel$close_BANG_$dyn_53270(chan);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn_53285 = (function (chan){\r\nvar x__4422__auto__ = (((chan == null))?null:chan);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(chan) : m__4423__auto__.call(null,chan));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.closed_QMARK_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(chan) : m__4420__auto__.call(null,chan));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Channel.closed?\",chan);\r\n}\r\n}\r\n});\r\ncljs.core.async.impl.protocols.closed_QMARK_ = (function cljs$core$async$impl$protocols$closed_QMARK_(chan){\r\nif((((!((chan == null)))) && ((!((chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)))))){\r\nreturn chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn_53285(chan);\r\n}\r\n});\r\n\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.Handler = function(){};\r\n\r\nvar cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn_53304 = (function (h){\r\nvar x__4422__auto__ = (((h == null))?null:h);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4423__auto__.call(null,h));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.active_QMARK_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4420__auto__.call(null,h));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Handler.active?\",h);\r\n}\r\n}\r\n});\r\n/**\r\n * returns true if has callback. Must work w/o lock\r\n */\r\ncljs.core.async.impl.protocols.active_QMARK_ = (function cljs$core$async$impl$protocols$active_QMARK_(h){\r\nif((((!((h == null)))) && ((!((h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)))))){\r\nreturn h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn_53304(h);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn_53322 = (function (h){\r\nvar x__4422__auto__ = (((h == null))?null:h);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4423__auto__.call(null,h));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.blockable_QMARK_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4420__auto__.call(null,h));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Handler.blockable?\",h);\r\n}\r\n}\r\n});\r\n/**\r\n * returns true if this handler may be blocked, otherwise it must not block\r\n */\r\ncljs.core.async.impl.protocols.blockable_QMARK_ = (function cljs$core$async$impl$protocols$blockable_QMARK_(h){\r\nif((((!((h == null)))) && ((!((h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)))))){\r\nreturn h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn_53322(h);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Handler$commit$dyn_53335 = (function (h){\r\nvar x__4422__auto__ = (((h == null))?null:h);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.commit[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4423__auto__.call(null,h));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.commit[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(h) : m__4420__auto__.call(null,h));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Handler.commit\",h);\r\n}\r\n}\r\n});\r\n/**\r\n * commit to fulfilling its end of the transfer, returns cb. Must be called within lock\r\n */\r\ncljs.core.async.impl.protocols.commit = (function cljs$core$async$impl$protocols$commit(h){\r\nif((((!((h == null)))) && ((!((h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)))))){\r\nreturn h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Handler$commit$dyn_53335(h);\r\n}\r\n});\r\n\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.Buffer = function(){};\r\n\r\nvar cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn_53363 = (function (b){\r\nvar x__4422__auto__ = (((b == null))?null:b);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4423__auto__.call(null,b));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.full_QMARK_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4420__auto__.call(null,b));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Buffer.full?\",b);\r\n}\r\n}\r\n});\r\n/**\r\n * returns true if buffer cannot accept put\r\n */\r\ncljs.core.async.impl.protocols.full_QMARK_ = (function cljs$core$async$impl$protocols$full_QMARK_(b){\r\nif((((!((b == null)))) && ((!((b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)))))){\r\nreturn b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn_53363(b);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn_53383 = (function (b){\r\nvar x__4422__auto__ = (((b == null))?null:b);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4423__auto__.call(null,b));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.remove_BANG_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4420__auto__.call(null,b));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Buffer.remove!\",b);\r\n}\r\n}\r\n});\r\n/**\r\n * remove and return next item from buffer, called under chan mutex\r\n */\r\ncljs.core.async.impl.protocols.remove_BANG_ = (function cljs$core$async$impl$protocols$remove_BANG_(b){\r\nif((((!((b == null)))) && ((!((b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)))))){\r\nreturn b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn_53383(b);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn_53395 = (function (b,itm){\r\nvar x__4422__auto__ = (((b == null))?null:b);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$2(b,itm) : m__4423__auto__.call(null,b,itm));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.add_BANG__STAR_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$2(b,itm) : m__4420__auto__.call(null,b,itm));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Buffer.add!*\",b);\r\n}\r\n}\r\n});\r\n/**\r\n * if room, add item to the buffer, returns b, called under chan mutex\r\n */\r\ncljs.core.async.impl.protocols.add_BANG__STAR_ = (function cljs$core$async$impl$protocols$add_BANG__STAR_(b,itm){\r\nif((((!((b == null)))) && ((!((b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)))))){\r\nreturn b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b,itm);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn_53395(b,itm);\r\n}\r\n});\r\n\r\nvar cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn_53424 = (function (b){\r\nvar x__4422__auto__ = (((b == null))?null:b);\r\nvar m__4423__auto__ = (cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4423__auto__.call(null,b));\r\n} else {\r\nvar m__4420__auto__ = (cljs.core.async.impl.protocols.close_buf_BANG_[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(b) : m__4420__auto__.call(null,b));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Buffer.close-buf!\",b);\r\n}\r\n}\r\n});\r\n/**\r\n * called on chan closed under chan mutex, return ignored\r\n */\r\ncljs.core.async.impl.protocols.close_buf_BANG_ = (function cljs$core$async$impl$protocols$close_buf_BANG_(b){\r\nif((((!((b == null)))) && ((!((b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)))))){\r\nreturn b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);\r\n} else {\r\nreturn cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn_53424(b);\r\n}\r\n});\r\n\r\ncljs.core.async.impl.protocols.add_BANG_ = (function cljs$core$async$impl$protocols$add_BANG_(var_args){\r\nvar G__53245 = arguments.length;\r\nswitch (G__53245) {\r\ncase 1:\r\nreturn cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (b){\r\nreturn b;\r\n}));\r\n\r\n(cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (b,itm){\r\nif((!((itm == null)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (not (nil? itm))\"));\r\n}\r\n\r\nreturn cljs.core.async.impl.protocols.add_BANG__STAR_(b,itm);\r\n}));\r\n\r\n(cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n\r\n/**\r\n * @interface\r\n */\r\ncljs.core.async.impl.protocols.UnblockingBuffer = function(){};\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/core/async/impl/protocols.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",35],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.impl.protocols","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^D",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","cljs/core/async/impl/protocols.cljs"],"~:compiled-at",1589228883474,"~:resource-name","cljs/core/async/impl/protocols.cljs","~:warnings",[],"~:source",";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.protocols)\n\n(def ^:const MAX-QUEUE-SIZE 1024)\n\n(defprotocol ReadPort\n  (take! [port fn1-handler] \"derefable val if taken, nil if take was enqueued\"))\n\n(defprotocol WritePort\n  (put! [port val fn1-handler] \"derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.\"))\n\n(defprotocol Channel\n  (close! [chan])\n  (closed? [chan]))\n\n(defprotocol Handler\n  (active? [h] \"returns true if has callback. Must work w/o lock\")\n  (blockable? [h] \"returns true if this handler may be blocked, otherwise it must not block\")\n  #_(lock-id [h] \"a unique id for lock acquisition order, 0 if no lock\")\n  (commit [h] \"commit to fulfilling its end of the transfer, returns cb. Must be called within lock\"))\n\n(defprotocol Buffer\n  (full? [b] \"returns true if buffer cannot accept put\")\n  (remove! [b] \"remove and return next item from buffer, called under chan mutex\")\n  (add!* [b itm] \"if room, add item to the buffer, returns b, called under chan mutex\")\n  (close-buf! [b] \"called on chan closed under chan mutex, return ignored\"))\n\n(defn add!\n  ([b] b)\n  ([b itm]\n     (assert (not (nil? itm)))\n     (add!* b itm)))\n\n;; Defines a buffer that will never block (return true to full?)\n(defprotocol UnblockingBuffer)\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","cljs$core$async$impl$protocols$ReadPort$take_BANG_$dyn","x__4422__auto__","m__4423__auto__","cljs.core.async.impl.protocols/take!","goog/typeOf","m__4420__auto__","cljs.core/missing-protocol","cljs.core.async.impl.protocols/ReadPort","port","fn1-handler","cljs$core$async$impl$protocols$WritePort$put_BANG_$dyn","cljs.core.async.impl.protocols/put!","cljs.core.async.impl.protocols/WritePort","val","cljs$core$async$impl$protocols$Channel$close_BANG_$dyn","cljs.core.async.impl.protocols/close!","cljs$core$async$impl$protocols$Channel$closed_QMARK_$dyn","cljs.core.async.impl.protocols/closed?","cljs.core.async.impl.protocols/Channel","chan","cljs$core$async$impl$protocols$Handler$active_QMARK_$dyn","cljs.core.async.impl.protocols/active?","cljs$core$async$impl$protocols$Handler$blockable_QMARK_$dyn","cljs.core.async.impl.protocols/blockable?","cljs$core$async$impl$protocols$Handler$commit$dyn","cljs.core.async.impl.protocols/commit","cljs.core.async.impl.protocols/Handler","h","cljs$core$async$impl$protocols$Buffer$full_QMARK_$dyn","cljs.core.async.impl.protocols/full?","cljs$core$async$impl$protocols$Buffer$remove_BANG_$dyn","cljs.core.async.impl.protocols/remove!","cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$dyn","cljs.core.async.impl.protocols/add!*","cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$dyn","cljs.core.async.impl.protocols/close-buf!","cljs.core.async.impl.protocols/Buffer","b","itm","var_args","G__53245","cljs.core.async.impl.protocols/add!","js/Error","cljs.core.async.impl.protocols/UnblockingBuffer"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1589208773000],["^W","goog/math/math.js"],[1589208774923,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^L","~$goog.array","~$goog.asserts"]]],["^W","goog/array/array.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1>"]]],["^W","goog/debug/error.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/dom/nodetype.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/object/object.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],"~:SHADOW-TIMESTAMP",[1589208783000,1589208773000],["^W","goog/math/long.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1>","~$goog.reflect"]]],["^W","goog/string/internal.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/functions/functions.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","cljs/core/async/impl/protocols.cljs"],[1589208774105,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^K"]]],["^W","goog/structs/map.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^W","goog/asserts/asserts.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^W","goog/uri/uri.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^W","goog/base.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",[]]],["^W","goog/structs/structs.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","~$goog.object"]]],["^W","goog/string/string.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","~$goog.string.internal"]]],["^W","goog/reflect/reflect.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/string/stringbuffer.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/iter/iter.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","~$goog.functions","~$goog.math"]]],["^W","cljs/core.cljs"],[1589208773847,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["~$goog.math.Long","~$goog.math.Integer","^1E","^1K","^1=","~$goog.Uri","~$goog.string.StringBuffer"]]],["^W","goog/math/integer.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L"]]],["^W","goog/uri/utils.js"],[1589208774923,"^19",["^ ","^1:",null,"^1;",["^D",[]],"^1<",["^L","^1=","^1>","^1E"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",9,"^8",5,"^9",9,"^:",35],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["cljs$core$async$impl$protocols$Buffer$","cljs$core$async$impl$protocols$Handler$","cljs$core$async$impl$protocols$ReadPort$","cljs$core$async$impl$protocols$WritePort$","cljs$core$async$impl$protocols$Channel$"]],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^D",[]],"~:shadow/js-access-global",["^D",["Error"]],"^N",null,"~:defs",["^ ","~$remove!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",32,"^8",4,"^9",32,"^:",11,"~:protocol","~$cljs.core.async.impl.protocols/Buffer","~:doc","remove and return next item from buffer, called under chan mutex","~:arglists",["^Q",["~$quote",["^Q",[["~$b"]]]]]],"^1Y","^1Z","^E","~$cljs.core.async.impl.protocols/remove!","^6","cljs/core/async/impl/protocols.cljs","^:",11,"~:method-params",["^Q",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"~:variadic?",false,"^7",30,"~:ret-tag","~$any","^9",32,"~:max-fixed-arity",1,"~:fn-var",true,"^20",["^Q",["^21",["^Q",[["~$b"]]]]],"^1[","remove and return next item from buffer, called under chan mutex"],"~$close-buf!",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",34,"^8",4,"^9",34,"^:",14,"^1Y","^1Z","^1[","called on chan closed under chan mutex, return ignored","^20",["^Q",["^21",["^Q",[["~$b"]]]]]],"^1Y","^1Z","^E","~$cljs.core.async.impl.protocols/close-buf!","^6","cljs/core/async/impl/protocols.cljs","^:",14,"^23",["^Q",[["~$b"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",30,"^27","^28","^9",34,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$b"]]]]],"^1[","called on chan closed under chan mutex, return ignored"],"~$close!",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",21,"^8",4,"^9",21,"^:",10,"^1Y","~$cljs.core.async.impl.protocols/Channel","^1[",null,"^20",["^Q",["^21",["^Q",[["~$chan"]]]]]],"^1Y","^2>","^E","~$cljs.core.async.impl.protocols/close!","^6","cljs/core/async/impl/protocols.cljs","^:",10,"^23",["^Q",[["^2?"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",20,"^27","^28","^9",21,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["^2?"]]]]],"^1[",null],"~$Handler",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","cljs/core/async/impl/protocols.cljs","^:",21,"^8",14,"^7",24,"~:protocol-info",["^ ","~:methods",["^ ","~$active?",[["~$h"]],"~$blockable?",[["~$h"]],"~$commit",[["~$h"]]]],"^9",24,"~:sigs",["^ ","~:active?",["^ ","^E","^2E","^20",["^Q",[["~$h"]]],"^1[","returns true if has callback. Must work w/o lock"],"~:blockable?",["^ ","^E","^2F","^20",["^Q",[["~$h"]]],"^1[","returns true if this handler may be blocked, otherwise it must not block"],"~:commit",["^ ","^E","^2G","^20",["^Q",[["~$h"]]],"^1[","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"]],"~:jsdoc",["^Q",["@interface"]]],"^2B",true,"^E","~$cljs.core.async.impl.protocols/Handler","^6","cljs/core/async/impl/protocols.cljs","^:",21,"^8",1,"^7",24,"^2C",["^ ","^2D",["^ ","^2E",[["~$h"]],"^2F",[["~$h"]],"^2G",[["~$h"]]]],"~:info",null,"^9",24,"~:tag","^28","^2H",["^ ","^2I",["^ ","^E","^2E","^20",["^Q",[["~$h"]]],"^1[","returns true if has callback. Must work w/o lock"],"^2J",["^ ","^E","^2F","^20",["^Q",[["~$h"]]],"^1[","returns true if this handler may be blocked, otherwise it must not block"],"^2K",["^ ","^E","^2G","^20",["^Q",[["~$h"]]],"^1[","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"]],"~:impls",["^D",[]],"^2L",["^Q",["@interface"]]],"^2F",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",26,"^8",4,"^9",26,"^:",14,"^1Y","^2M","^1[","returns true if this handler may be blocked, otherwise it must not block","^20",["^Q",["^21",["^Q",[["~$h"]]]]]],"^1Y","^2M","^E","~$cljs.core.async.impl.protocols/blockable?","^6","cljs/core/async/impl/protocols.cljs","^:",14,"^23",["^Q",[["~$h"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",24,"^27","^28","^9",26,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$h"]]]]],"^1[","returns true if this handler may be blocked, otherwise it must not block"],"^2E",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",25,"^8",4,"^9",25,"^:",11,"^1Y","^2M","^1[","returns true if has callback. Must work w/o lock","^20",["^Q",["^21",["^Q",[["~$h"]]]]]],"^1Y","^2M","^E","~$cljs.core.async.impl.protocols/active?","^6","cljs/core/async/impl/protocols.cljs","^:",11,"^23",["^Q",[["~$h"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",24,"^27","^28","^9",25,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$h"]]]]],"^1[","returns true if has callback. Must work w/o lock"],"~$Buffer",["^ ","^5",["^ ","^2B",true,"^6","cljs/core/async/impl/protocols.cljs","^:",20,"^8",14,"^7",30,"^2C",["^ ","^2D",["^ ","~$full?",[["~$b"]],"^1W",[["~$b"]],"~$add!*",[["~$b","~$itm"]],"^2;",[["~$b"]]]],"^9",30,"^2H",["^ ","~:full?",["^ ","^E","^2T","^20",["^Q",[["~$b"]]],"^1[","returns true if buffer cannot accept put"],"~:remove!",["^ ","^E","^1W","^20",["^Q",[["~$b"]]],"^1[","remove and return next item from buffer, called under chan mutex"],"~:add!*",["^ ","^E","^2U","^20",["^Q",[["~$b","^2V"]]],"^1[","if room, add item to the buffer, returns b, called under chan mutex"],"~:close-buf!",["^ ","^E","^2;","^20",["^Q",[["~$b"]]],"^1[","called on chan closed under chan mutex, return ignored"]],"^2L",["^Q",["@interface"]]],"^2B",true,"^E","^1Z","^6","cljs/core/async/impl/protocols.cljs","^:",20,"^8",1,"^7",30,"^2C",["^ ","^2D",["^ ","^2T",[["~$b"]],"^1W",[["~$b"]],"^2U",[["~$b","^2V"]],"^2;",[["~$b"]]]],"^2N",null,"^9",30,"^2O","^28","^2H",["^ ","^2W",["^ ","^E","^2T","^20",["^Q",[["~$b"]]],"^1[","returns true if buffer cannot accept put"],"^2X",["^ ","^E","^1W","^20",["^Q",[["~$b"]]],"^1[","remove and return next item from buffer, called under chan mutex"],"^2Y",["^ ","^E","^2U","^20",["^Q",[["~$b","^2V"]]],"^1[","if room, add item to the buffer, returns b, called under chan mutex"],"^2Z",["^ ","^E","^2;","^20",["^Q",[["~$b"]]],"^1[","called on chan closed under chan mutex, return ignored"]],"^2P",["^D",[]],"^2L",["^Q",["@interface"]]],"^2T",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^1Y","^1Z","^1[","returns true if buffer cannot accept put","^20",["^Q",["^21",["^Q",[["~$b"]]]]]],"^1Y","^1Z","^E","~$cljs.core.async.impl.protocols/full?","^6","cljs/core/async/impl/protocols.cljs","^:",9,"^23",["^Q",[["~$b"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",30,"^27","^28","^9",31,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$b"]]]]],"^1[","returns true if buffer cannot accept put"],"~$add!",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",36,"^8",7,"^9",36,"^:",11,"^20",["^Q",["^21",["^Q",[["~$b"],["~$b","^2V"]]]]],"~:top-fn",["^ ","^26",false,"~:fixed-arity",2,"^29",2,"^23",[["~$b"],["~$b","^2V"]],"^20",["^Q",[["~$b"],["~$b","^2V"]]],"^25",["^Q",[null,null]]]],"^E","~$cljs.core.async.impl.protocols/add!","^6","cljs/core/async/impl/protocols.cljs","^:",11,"^31",["^ ","^26",false,"^32",2,"^29",2,"^23",[["~$b"],["~$b","^2V"]],"^20",["^Q",[["~$b"],["~$b","^2V"]]],"^25",["^Q",[null,null]]],"^23",[["~$b"],["~$b","^2V"]],"^24",null,"^32",2,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^2D",[["^ ","^32",1,"^26",false],["^ ","^32",2,"^26",false,"^2O","^28"]],"^7",36,"^9",36,"^29",2,"^2:",true,"^20",["^Q",[["~$b"],["~$b","^2V"]]]],"^2U",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",33,"^8",4,"^9",33,"^:",9,"^1Y","^1Z","^1[","if room, add item to the buffer, returns b, called under chan mutex","^20",["^Q",["^21",["^Q",[["~$b","^2V"]]]]]],"^1Y","^1Z","^E","~$cljs.core.async.impl.protocols/add!*","^6","cljs/core/async/impl/protocols.cljs","^:",9,"^23",["^Q",[["~$b","^2V"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",30,"^27","^28","^9",33,"^29",2,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$b","^2V"]]]]],"^1[","if room, add item to the buffer, returns b, called under chan mutex"],"~$ReadPort",["^ ","^5",["^ ","^2B",true,"^6","cljs/core/async/impl/protocols.cljs","^:",22,"^8",14,"^7",13,"^2C",["^ ","^2D",["^ ","~$take!",[["~$port","~$fn1-handler"]]]],"^9",13,"^2H",["^ ","~:take!",["^ ","^E","^36","^20",["^Q",[["^37","^38"]]],"^1[","derefable val if taken, nil if take was enqueued"]],"^2L",["^Q",["@interface"]]],"^2B",true,"^E","~$cljs.core.async.impl.protocols/ReadPort","^6","cljs/core/async/impl/protocols.cljs","^:",22,"^8",1,"^7",13,"^2C",["^ ","^2D",["^ ","^36",[["^37","^38"]]]],"^2N",null,"^9",13,"^2O","^28","^2H",["^ ","^39",["^ ","^E","^36","^20",["^Q",[["^37","^38"]]],"^1[","derefable val if taken, nil if take was enqueued"]],"^2P",["^D",[]],"^2L",["^Q",["@interface"]]],"~$Channel",["^ ","^5",["^ ","^2B",true,"^6","cljs/core/async/impl/protocols.cljs","^:",21,"^8",14,"^7",20,"^2C",["^ ","^2D",["^ ","^2=",[["^2?"]],"~$closed?",[["^2?"]]]],"^9",20,"^2H",["^ ","~:close!",["^ ","^E","^2=","^20",["^Q",[["^2?"]]],"^1[",null],"~:closed?",["^ ","^E","^3<","^20",["^Q",[["^2?"]]],"^1[",null]],"^2L",["^Q",["@interface"]]],"^2B",true,"^E","^2>","^6","cljs/core/async/impl/protocols.cljs","^:",21,"^8",1,"^7",20,"^2C",["^ ","^2D",["^ ","^2=",[["^2?"]],"^3<",[["^2?"]]]],"^2N",null,"^9",20,"^2O","^28","^2H",["^ ","^3=",["^ ","^E","^2=","^20",["^Q",[["^2?"]]],"^1[",null],"^3>",["^ ","^E","^3<","^20",["^Q",[["^2?"]]],"^1[",null]],"^2P",["^D",[]],"^2L",["^Q",["@interface"]]],"^3<",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",22,"^8",4,"^9",22,"^:",11,"^1Y","^2>","^1[",null,"^20",["^Q",["^21",["^Q",[["^2?"]]]]]],"^1Y","^2>","^E","~$cljs.core.async.impl.protocols/closed?","^6","cljs/core/async/impl/protocols.cljs","^:",11,"^23",["^Q",[["^2?"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",20,"^27","^28","^9",22,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["^2?"]]]]],"^1[",null],"~$UnblockingBuffer",["^ ","^5",["^ ","^2B",true,"^6","cljs/core/async/impl/protocols.cljs","^:",30,"^8",14,"^7",43,"^2C",["^ ","^2D",["^ "]],"^9",43,"^2H",["^ "],"^2L",["^Q",["@interface"]]],"^2B",true,"^E","~$cljs.core.async.impl.protocols/UnblockingBuffer","^6","cljs/core/async/impl/protocols.cljs","^:",30,"^8",1,"^7",43,"^2C",["^ ","^2D",["^ "]],"^2N",null,"^9",43,"^2O","^28","^2H",["^ "],"^2P",["^D",[]],"^2L",["^Q",["@interface"]]],"~$MAX-QUEUE-SIZE",["^ ","^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",11,"^8",14,"^9",11,"^:",28,"~:const",true],"^E","~$cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","^6","cljs/core/async/impl/protocols.cljs","^:",28,"~:const-expr",["^ ","^G","^3C","~:val",1024,"~:env",["^ ","~:context","~:expr"],"^P",1024,"^2O","~$number"],"^8",1,"^3C",true,"^7",11,"^9",11,"^2O","^3J"],"^2G",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",28,"^8",4,"^9",28,"^:",10,"^1Y","^2M","^1[","commit to fulfilling its end of the transfer, returns cb. Must be called within lock","^20",["^Q",["^21",["^Q",[["~$h"]]]]]],"^1Y","^2M","^E","~$cljs.core.async.impl.protocols/commit","^6","cljs/core/async/impl/protocols.cljs","^:",10,"^23",["^Q",[["~$h"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",24,"^27","^28","^9",28,"^29",1,"^2:",true,"^20",["^Q",["^21",["^Q",[["~$h"]]]]],"^1[","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"],"~$put!",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",17,"^8",4,"^9",17,"^:",8,"^1Y","~$cljs.core.async.impl.protocols/WritePort","^1[","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.","^20",["^Q",["^21",["^Q",[["^37","~$val","^38"]]]]]],"^1Y","^3M","^E","~$cljs.core.async.impl.protocols/put!","^6","cljs/core/async/impl/protocols.cljs","^:",8,"^23",["^Q",[["^37","^3N","^38"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",16,"^27","^28","^9",17,"^29",3,"^2:",true,"^20",["^Q",["^21",["^Q",[["^37","^3N","^38"]]]]],"^1[","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."],"^36",["^ ","^1X",null,"^5",["^ ","^6","cljs/core/async/impl/protocols.cljs","^7",14,"^8",4,"^9",14,"^:",9,"^1Y","^3:","^1[","derefable val if taken, nil if take was enqueued","^20",["^Q",["^21",["^Q",[["^37","^38"]]]]]],"^1Y","^3:","^E","~$cljs.core.async.impl.protocols/take!","^6","cljs/core/async/impl/protocols.cljs","^:",9,"^23",["^Q",[["^37","^38"]]],"^24",null,"^25",["^Q",[null,null]],"^8",1,"^26",false,"^7",13,"^27","^28","^9",14,"^29",2,"^2:",true,"^20",["^Q",["^21",["^Q",[["^37","^38"]]]]],"^1[","derefable val if taken, nil if take was enqueued"],"~$WritePort",["^ ","^5",["^ ","^2B",true,"^6","cljs/core/async/impl/protocols.cljs","^:",23,"^8",14,"^7",16,"^2C",["^ ","^2D",["^ ","^3L",[["^37","^3N","^38"]]]],"^9",16,"^2H",["^ ","~:put!",["^ ","^E","^3L","^20",["^Q",[["^37","^3N","^38"]]],"^1[","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."]],"^2L",["^Q",["@interface"]]],"^2B",true,"^E","^3M","^6","cljs/core/async/impl/protocols.cljs","^:",23,"^8",1,"^7",16,"^2C",["^ ","^2D",["^ ","^3L",[["^37","^3N","^38"]]]],"^2N",null,"^9",16,"^2O","^28","^2H",["^ ","^3R",["^ ","^E","^3L","^20",["^Q",[["^37","^3N","^38"]]],"^1[","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."]],"^2P",["^D",[]],"^2L",["^Q",["@interface"]]]],"^O",["^ ","^K","^K"],"^S",["^ "],"^T",["^ "],"^U",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^17",[["^3U","~:static-fns"],true,["^3U","~:elide-asserts"],false,["^3U","~:optimize-constants"],null,["^3U","^Z"],null,["^3U","~:external-config"],null,["^3U","~:tooling-config"],null,["^3U","~:emit-constants"],null,["^3U","~:load-tests"],null,["^3U","~:infer-externs"],true,["^3U","^10"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3U","~:fn-invoke-direct"],null,["^3U","~:source-map"],"/dev/null"]]]