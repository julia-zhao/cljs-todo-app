["^ ","~:output",["^ ","~:js","goog.provide('cljs.stacktrace');\r\ngoog.require('cljs.core');\r\ngoog.require('goog.string');\r\ngoog.require('clojure.string');\r\nif((typeof cljs !== 'undefined') && (typeof cljs.stacktrace !== 'undefined') && (typeof cljs.stacktrace.parse_stacktrace !== 'undefined')){\r\n} else {\r\n/**\r\n * Parse a JavaScript stacktrace string into a canonical data form. The\r\n *   arguments:\r\n * \r\n *   repl-env - the repl environment, an optional map with :host and :port keys\r\n *           if the stacktrace includes url, not file references\r\n *   st       - the original stacktrace string to parse\r\n *   err      - an error map. :ua-product key defines the type of stacktrace parser\r\n *           to use, for example :chrome\r\n *   opts     - additional options. :output-dir maybe given in this argument if\r\n *           :host and :port do not apply, for example, a file path\r\n * \r\n *   The canonical stacktrace representation can easily be mapped to a\r\n *   ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\r\n */\r\ncljs.stacktrace.parse_stacktrace = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__54990 = cljs.core.get_global_hierarchy;\r\nreturn (fexpr__54990.cljs$core$IFn$_invoke$arity$0 ? fexpr__54990.cljs$core$IFn$_invoke$arity$0() : fexpr__54990.call(null));\r\n})());\r\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"cljs.stacktrace\",\"parse-stacktrace\"),(function (repl_env,st,err,opts){\r\nreturn new cljs.core.Keyword(null,\"ua-product\",\"ua-product\",938384227).cljs$core$IFn$_invoke$arity$1(err);\r\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\r\n})();\r\n}\r\ncljs.stacktrace.parse_int = (function cljs$stacktrace$parse_int(s){\r\nreturn parseInt(s,(10));\r\n});\r\ncljs.stacktrace.starts_with_QMARK_ = (function cljs$stacktrace$starts_with_QMARK_(s0,s1){\r\nreturn goog.string.startsWith(s0,s1);\r\n});\r\ncljs.stacktrace.ends_with_QMARK_ = (function cljs$stacktrace$ends_with_QMARK_(s0,s1){\r\nreturn goog.string.endsWith(s0,s1);\r\n});\r\ncljs.stacktrace.string__GT_regex = (function cljs$stacktrace$string__GT_regex(s){\r\nreturn (new RegExp(s));\r\n});\r\ncljs.stacktrace.output_directory = (function cljs$stacktrace$output_directory(opts){\r\nvar or__4120__auto__ = new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991).cljs$core$IFn$_invoke$arity$1(opts);\r\nif(cljs.core.truth_(or__4120__auto__)){\r\nreturn or__4120__auto__;\r\n} else {\r\nreturn \"out\";\r\n}\r\n});\r\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (repl_env,st,err,opts){\r\nreturn st;\r\n}));\r\ncljs.stacktrace.parse_file_line_column = (function cljs$stacktrace$parse_file_line_column(flc){\r\nif(cljs.core.not(cljs.core.re_find(/:/,flc))){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [flc,null,null], null);\r\n} else {\r\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(flc,/:/);\r\nvar vec__55030 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__55036,p__55037){\r\nvar vec__55038 = p__55036;\r\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55038,(0),null);\r\nvar post = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55038,(1),null);\r\nvar vec__55041 = p__55037;\r\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55041,(0),null);\r\nvar i = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55041,(1),null);\r\nif((i <= (2))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(post,x)], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(pre,x),post], null);\r\n}\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY], null),cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,xs,cljs.core.range.cljs$core$IFn$_invoke$arity$3(cljs.core.count(xs),(0),(-1))));\r\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55030,(0),null);\r\nvar vec__55033 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55030,(1),null);\r\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55033,(0),null);\r\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55033,(1),null);\r\nvar file = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\":\",pre);\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__55046 = file;\r\nif(cljs.stacktrace.starts_with_QMARK_(file,\"(\")){\r\nreturn clojure.string.replace(G__55046,\"(\",\"\");\r\n} else {\r\nreturn G__55046;\r\n}\r\n})(),cljs.stacktrace.parse_int((function (){var G__55048 = line;\r\nif(cljs.stacktrace.ends_with_QMARK_(line,\")\")){\r\nreturn clojure.string.replace(G__55048,\")\",\"\");\r\n} else {\r\nreturn G__55048;\r\n}\r\n})()),cljs.stacktrace.parse_int((function (){var G__55050 = column;\r\nif(cljs.stacktrace.ends_with_QMARK_(column,\")\")){\r\nreturn clojure.string.replace(G__55050,\")\",\"\");\r\n} else {\r\nreturn G__55050;\r\n}\r\n})())], null);\r\n}\r\n});\r\n/**\r\n * Given a browser file url convert it into a relative path that can be used\r\n * to locate the original source.\r\n */\r\ncljs.stacktrace.parse_file = (function cljs$stacktrace$parse_file(p__55057,file,p__55058){\r\nvar map__55060 = p__55057;\r\nvar map__55060__$1 = (((((!((map__55060 == null))))?(((((map__55060.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55060.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55060):map__55060);\r\nvar repl_env = map__55060__$1;\r\nvar host = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55060__$1,new cljs.core.Keyword(null,\"host\",\"host\",-1558485167));\r\nvar host_port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55060__$1,new cljs.core.Keyword(null,\"host-port\",\"host-port\",1956551772));\r\nvar port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55060__$1,new cljs.core.Keyword(null,\"port\",\"port\",1534937262));\r\nvar map__55061 = p__55058;\r\nvar map__55061__$1 = (((((!((map__55061 == null))))?(((((map__55061.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55061.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55061):map__55061);\r\nvar opts = map__55061__$1;\r\nvar asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55061__$1,new cljs.core.Keyword(null,\"asset-path\",\"asset-path\",1500889617));\r\nvar urlpat = (cljs.core.truth_(host)?cljs.stacktrace.string__GT_regex([\"http://\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(host),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4120__auto__ = host_port;\r\nif(cljs.core.truth_(or__4120__auto__)){\r\nreturn or__4120__auto__;\r\n} else {\r\nreturn port;\r\n}\r\n})()),\"/\"].join('')):\"\");\r\nvar match = (cljs.core.truth_(host)?cljs.core.re_find(urlpat,file):cljs.core.contains_QMARK_(opts,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991)));\r\nif(cljs.core.truth_(match)){\r\nreturn clojure.string.replace(clojure.string.replace(file,urlpat,\"\"),cljs.stacktrace.string__GT_regex([\"^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4120__auto__ = (function (){var and__4109__auto__ = asset_path;\r\nif(cljs.core.truth_(and__4109__auto__)){\r\nreturn clojure.string.replace(asset_path,/^\\//,\"\");\r\n} else {\r\nreturn and__4109__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(or__4120__auto__)){\r\nreturn or__4120__auto__;\r\n} else {\r\nreturn cljs.stacktrace.output_directory(opts);\r\n}\r\n})()),\"/\"].join('')),\"\");\r\n} else {\r\nvar temp__5733__auto__ = new cljs.core.Keyword(null,\"asset-root\",\"asset-root\",1771735072).cljs$core$IFn$_invoke$arity$1(opts);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar asset_root = temp__5733__auto__;\r\nreturn clojure.string.replace(file,asset_root,\"\");\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Could not relativize URL \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"parse-stacktrace\",\"parse-stacktrace\",-38208461),new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),new cljs.core.Keyword(null,\"relativize-url\",\"relativize-url\",621482324)], null));\r\n}\r\n}\r\n});\r\ncljs.stacktrace.chrome_st_el__GT_frame = (function cljs$stacktrace$chrome_st_el__GT_frame(repl_env,st_el,opts){\r\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(clojure.string.replace(st_el,/\\s+at\\s+/,\"\"),/\\s+/);\r\nvar vec__55074 = ((((1) === cljs.core.count(xs)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(xs)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(xs),cljs.core.last(xs)], null));\r\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55074,(0),null);\r\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55074,(1),null);\r\nvar vec__55077 = cljs.stacktrace.parse_file_line_column(flc);\r\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55077,(0),null);\r\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55077,(1),null);\r\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55077,(2),null);\r\nif(cljs.core.truth_((function (){var and__4109__auto__ = file;\r\nif(cljs.core.truth_(and__4109__auto__)){\r\nvar and__4109__auto____$1 = function$;\r\nif(cljs.core.truth_(and__4109__auto____$1)){\r\nvar and__4109__auto____$2 = line;\r\nif(cljs.core.truth_(and__4109__auto____$2)){\r\nreturn column;\r\n} else {\r\nreturn and__4109__auto____$2;\r\n}\r\n} else {\r\nreturn and__4109__auto____$1;\r\n}\r\n} else {\r\nreturn and__4109__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\r\n} else {\r\nif(clojure.string.blank_QMARK_(function$)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\r\n}\r\n}\r\n});\r\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"chrome\",\"chrome\",1718738387),(function (repl_env,st,err,opts){\r\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__55097_SHARP_){\r\nreturn cljs.stacktrace.chrome_st_el__GT_frame(repl_env,p1__55097_SHARP_,opts);\r\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__55095_SHARP_){\r\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__55095_SHARP_,\"    at eval\")));\r\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__55094_SHARP_){\r\nreturn cljs.stacktrace.starts_with_QMARK_(p1__55094_SHARP_,\"Error\");\r\n}),clojure.string.split_lines(st))))));\r\n}));\r\ncljs.stacktrace.safari_st_el__GT_frame = (function cljs$stacktrace$safari_st_el__GT_frame(repl_env,st_el,opts){\r\nvar vec__55116 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\r\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55116,(0),null);\r\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55116,(1),null);\r\nvar vec__55119 = cljs.stacktrace.parse_file_line_column(flc);\r\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55119,(0),null);\r\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55119,(1),null);\r\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55119,(2),null);\r\nif(cljs.core.truth_((function (){var and__4109__auto__ = file;\r\nif(cljs.core.truth_(and__4109__auto__)){\r\nvar and__4109__auto____$1 = function$;\r\nif(cljs.core.truth_(and__4109__auto____$1)){\r\nvar and__4109__auto____$2 = line;\r\nif(cljs.core.truth_(and__4109__auto____$2)){\r\nreturn column;\r\n} else {\r\nreturn and__4109__auto____$2;\r\n}\r\n} else {\r\nreturn and__4109__auto____$1;\r\n}\r\n} else {\r\nreturn and__4109__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\r\n} else {\r\nif(clojure.string.blank_QMARK_(function$)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\r\n}\r\n}\r\n});\r\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"safari\",\"safari\",497115653),(function (repl_env,st,err,opts){\r\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__55132_SHARP_){\r\nreturn cljs.stacktrace.safari_st_el__GT_frame(repl_env,p1__55132_SHARP_,opts);\r\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__55131_SHARP_){\r\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__55131_SHARP_,\"eval code\")));\r\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__55130_SHARP_){\r\nreturn cljs.stacktrace.starts_with_QMARK_(p1__55130_SHARP_,\"Error\");\r\n}),clojure.string.split_lines(st)))))));\r\n}));\r\ncljs.stacktrace.firefox_clean_function = (function cljs$stacktrace$firefox_clean_function(f){\r\nvar f__$1 = f;\r\nvar f__$2 = ((clojure.string.blank_QMARK_(f__$1))?null:((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(f__$1.indexOf(\"</\"),(-1)))?(function (){var idx = f__$1.indexOf(\"</\");\r\nreturn f__$1.substring((idx + (2)));\r\n})():f__$1\r\n));\r\nreturn clojure.string.replace(clojure.string.replace(f__$2,/</,\"\"),(new RegExp(\"\\\\/\")),\"\");\r\n});\r\ncljs.stacktrace.firefox_st_el__GT_frame = (function cljs$stacktrace$firefox_st_el__GT_frame(repl_env,st_el,opts){\r\nvar vec__55163 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\r\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55163,(0),null);\r\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55163,(1),null);\r\nvar vec__55166 = cljs.stacktrace.parse_file_line_column(flc);\r\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55166,(0),null);\r\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55166,(1),null);\r\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55166,(2),null);\r\nif(cljs.core.truth_((function (){var and__4109__auto__ = file;\r\nif(cljs.core.truth_(and__4109__auto__)){\r\nvar and__4109__auto____$1 = function$;\r\nif(cljs.core.truth_(and__4109__auto____$1)){\r\nvar and__4109__auto____$2 = line;\r\nif(cljs.core.truth_(and__4109__auto____$2)){\r\nreturn column;\r\n} else {\r\nreturn and__4109__auto____$2;\r\n}\r\n} else {\r\nreturn and__4109__auto____$1;\r\n}\r\n} else {\r\nreturn and__4109__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\r\n} else {\r\nif(clojure.string.blank_QMARK_(function$)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\r\n}\r\n}\r\n});\r\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"firefox\",\"firefox\",1283768880),(function (repl_env,st,err,opts){\r\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__55174_SHARP_){\r\nreturn cljs.stacktrace.firefox_st_el__GT_frame(repl_env,p1__55174_SHARP_,opts);\r\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__55173_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(p1__55173_SHARP_.indexOf(\"> eval\"),(-1));\r\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__55172_SHARP_){\r\nreturn cljs.stacktrace.starts_with_QMARK_(p1__55172_SHARP_,\"Error\");\r\n}),clojure.string.split_lines(st)))))));\r\n}));\r\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nodejs\",\"nodejs\",321212524),(function (repl_env,st,err,p__55305){\r\nvar map__55307 = p__55305;\r\nvar map__55307__$1 = (((((!((map__55307 == null))))?(((((map__55307.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55307.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55307):map__55307);\r\nvar opts = map__55307__$1;\r\nvar output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55307__$1,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991));\r\nvar parse_source_loc_info = (function cljs$stacktrace$parse_source_loc_info(x){\r\nif(cljs.core.truth_((function (){var and__4109__auto__ = x;\r\nif(cljs.core.truth_(and__4109__auto__)){\r\nreturn (!(clojure.string.blank_QMARK_(x)));\r\n} else {\r\nreturn and__4109__auto__;\r\n}\r\n})())){\r\nreturn cljs.stacktrace.parse_int(x);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nvar process_frame = (function cljs$stacktrace$process_frame(frame_str){\r\nif(((clojure.string.blank_QMARK_(frame_str)) || ((cljs.core.re_find(/^\\s+at/,frame_str) == null)))){\r\nreturn null;\r\n} else {\r\nvar frame_str__$1 = clojure.string.replace(frame_str,/\\s+at\\s+/,\"\");\r\nif(clojure.string.starts_with_QMARK_(frame_str__$1,\"repl:\")){\r\nreturn null;\r\n} else {\r\nvar parts = clojure.string.split.cljs$core$IFn$_invoke$arity$2(frame_str__$1,/\\s+/);\r\nvar vec__55363 = ((((2) === cljs.core.count(parts)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(parts),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(cljs.core.second(parts),(1),(cljs.core.count(cljs.core.second(parts)) - (1)))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(parts)], null));\r\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55363,(0),null);\r\nvar file_AMPERSAND_line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55363,(1),null);\r\nvar vec__55366 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(file_AMPERSAND_line,/:/);\r\nvar file_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55366,(0),null);\r\nvar line_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55366,(1),null);\r\nvar col_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55366,(2),null);\r\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),(cljs.core.truth_(function$)?(function (){var G__55370 = file_part;\r\nif(cljs.core.truth_(output_dir)){\r\nreturn clojure.string.replace(G__55370,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(output_dir),\"/\"].join(''),\"\");\r\n} else {\r\nreturn G__55370;\r\n}\r\n})():file_part),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"line\",\"line\",212345235),parse_source_loc_info(line_part),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),parse_source_loc_info(col_part)], null);\r\n}\r\n}\r\n});\r\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(process_frame,clojure.string.split.cljs$core$IFn$_invoke$arity$2(st,/\\n/))));\r\n}));\r\ncljs.stacktrace.remove_ext = (function cljs$stacktrace$remove_ext(file){\r\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(file,/\\.js$/,\"\"),/\\.cljs$/,\"\"),/\\.cljc$/,\"\"),/\\.clj$/,\"\");\r\n});\r\n/**\r\n * Given a cljs.source-map source map data structure map a generated line\r\n * and column back to the original line, column, and function called.\r\n */\r\ncljs.stacktrace.mapped_line_column_call = (function cljs$stacktrace$mapped_line_column_call(sms,file,line,column){\r\nvar source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(sms,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(cljs.stacktrace.remove_ext(file),\"/\",\".\")));\r\nvar get_best_column = (function cljs$stacktrace$mapped_line_column_call_$_get_best_column(columns,column__$1){\r\nreturn cljs.core.last((function (){var or__4120__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(columns,cljs.core.last(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__55380_SHARP_){\r\nreturn (p1__55380_SHARP_ <= (column__$1 - (1)));\r\n}),cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.keys(columns)))));\r\nif(cljs.core.truth_(or__4120__auto__)){\r\nreturn or__4120__auto__;\r\n} else {\r\nreturn cljs.core.second(cljs.core.first(columns));\r\n}\r\n})());\r\n});\r\nvar adjust = (function cljs$stacktrace$mapped_line_column_call_$_adjust(mapped){\r\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (p1__55381_SHARP_,p2__55382_SHARP_){\r\nreturn (p1__55381_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__55381_SHARP_.cljs$core$IFn$_invoke$arity$1(p2__55382_SHARP_) : p1__55381_SHARP_.call(null,p2__55382_SHARP_));\r\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.inc,cljs.core.inc,cljs.core.identity], null),mapped));\r\n});\r\nvar default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null);\r\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(source_map,(line - (1)));\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar columns = temp__5733__auto__;\r\nreturn adjust(cljs.core.map.cljs$core$IFn$_invoke$arity$2(get_best_column(columns,column),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"col\",\"col\",-1959363084),new cljs.core.Keyword(null,\"name\",\"name\",1843675177)], null)));\r\n} else {\r\nreturn default$;\r\n}\r\n});\r\n/**\r\n * Given opts and a canonicalized JavaScript stacktrace frame, return the\r\n *   ClojureScript frame.\r\n */\r\ncljs.stacktrace.mapped_frame = (function cljs$stacktrace$mapped_frame(p__55412,sms,opts){\r\nvar map__55414 = p__55412;\r\nvar map__55414__$1 = (((((!((map__55414 == null))))?(((((map__55414.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55414.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55414):map__55414);\r\nvar function$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55414__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\r\nvar file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55414__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\r\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55414__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\r\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55414__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\r\nvar no_source_file_QMARK_ = ((cljs.core.not(file))?true:cljs.stacktrace.starts_with_QMARK_(file,\"<\"));\r\nvar vec__55423 = ((no_source_file_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null):cljs.stacktrace.mapped_line_column_call(sms,file,line,column));\r\nvar line_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55423,(0),null);\r\nvar column_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55423,(1),null);\r\nvar call = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55423,(2),null);\r\nvar file_SINGLEQUOTE_ = ((no_source_file_QMARK_)?null:((cljs.stacktrace.ends_with_QMARK_(file,\".js\"))?[cljs.core.subs.cljs$core$IFn$_invoke$arity$3(file,(0),(cljs.core.count(file) - (3))),\".cljs\"].join(''):file));\r\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),call,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),((no_source_file_QMARK_)?[\"NO_SOURCE_FILE\",(cljs.core.truth_(file)?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''):null)].join(''):file_SINGLEQUOTE_),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line_SINGLEQUOTE_,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column_SINGLEQUOTE_], null);\r\n});\r\n/**\r\n * Given a vector representing the canonicalized JavaScript stacktrace\r\n * return the ClojureScript stacktrace. The canonical stacktrace must be\r\n * in the form:\r\n * \r\n *  [{:file <string>\r\n *    :function <string>\r\n *    :line <integer>\r\n *    :column <integer>}*]\r\n * \r\n * :file must be a URL path (without protocol) relative to :output-dir or a\r\n * identifier delimited by angle brackets. The returned mapped stacktrace will\r\n * also contain :url entries to the original sources if it can be determined\r\n * from the classpath.\r\n */\r\ncljs.stacktrace.mapped_stacktrace = (function cljs$stacktrace$mapped_stacktrace(var_args){\r\nvar G__55448 = arguments.length;\r\nswitch (G__55448) {\r\ncase 2:\r\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\r\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\r\n}));\r\n\r\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\r\nvar call__GT_function = (function cljs$stacktrace$call__GT_function(x){\r\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x))){\r\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"function\",\"function\",-2127255473)],[new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x)]);\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n});\r\nvar call_merge = (function cljs$stacktrace$call_merge(function$,call){\r\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic((function (munged_fn_name,unmunged_call_name){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(munged_fn_name,clojure.string.replace(cljs.core.munge(unmunged_call_name),\".\",\"$\"))){\r\nreturn unmunged_call_name;\r\n} else {\r\nreturn munged_fn_name;\r\n}\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([function$,call], 0));\r\n});\r\nvar mapped_frames = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.memoize((function (p1__55445_SHARP_){\r\nreturn cljs.stacktrace.mapped_frame(p1__55445_SHARP_,sms,opts);\r\n})),stacktrace);\r\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3(call_merge,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__55446_SHARP_){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(p1__55446_SHARP_,new cljs.core.Keyword(null,\"call\",\"call\",-519999866));\r\n}),mapped_frames),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(cljs.core.map.cljs$core$IFn$_invoke$arity$2(call__GT_function,mapped_frames)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY], null))));\r\n}));\r\n\r\n(cljs.stacktrace.mapped_stacktrace.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Given a vector representing the canonicalized JavaScript stacktrace and a map\r\n *   of library names to decoded source maps, print the ClojureScript stacktrace .\r\n *   See mapped-stacktrace.\r\n */\r\ncljs.stacktrace.mapped_stacktrace_str = (function cljs$stacktrace$mapped_stacktrace_str(var_args){\r\nvar G__55484 = arguments.length;\r\nswitch (G__55484) {\r\ncase 2:\r\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\r\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\r\n}));\r\n\r\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\r\nvar sb__4661__auto__ = (new goog.string.StringBuffer());\r\nvar _STAR_print_newline_STAR__orig_val__55496_55857 = cljs.core._STAR_print_newline_STAR_;\r\nvar _STAR_print_fn_STAR__orig_val__55497_55858 = cljs.core._STAR_print_fn_STAR_;\r\nvar _STAR_print_newline_STAR__temp_val__55498_55859 = true;\r\nvar _STAR_print_fn_STAR__temp_val__55499_55860 = (function (x__4662__auto__){\r\nreturn sb__4661__auto__.append(x__4662__auto__);\r\n});\r\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__55498_55859);\r\n\r\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__55499_55860);\r\n\r\ntry{var seq__55513_55863 = cljs.core.seq(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,opts));\r\nvar chunk__55514_55864 = null;\r\nvar count__55515_55865 = (0);\r\nvar i__55516_55866 = (0);\r\nwhile(true){\r\nif((i__55516_55866 < count__55515_55865)){\r\nvar map__55552_55867 = chunk__55514_55864.cljs$core$IIndexed$_nth$arity$2(null,i__55516_55866);\r\nvar map__55552_55868__$1 = (((((!((map__55552_55867 == null))))?(((((map__55552_55867.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55552_55867.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55552_55867):map__55552_55867);\r\nvar function_55869 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55552_55868__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\r\nvar file_55870 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55552_55868__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\r\nvar line_55871 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55552_55868__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\r\nvar column_55872 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55552_55868__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\r\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_55869)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_55869),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_55870),(cljs.core.truth_(line_55871)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_55871)].join(''):null),(cljs.core.truth_(column_55872)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_55872)].join(''):null),\")\"].join('')], 0));\r\n\r\n\r\nvar G__55873 = seq__55513_55863;\r\nvar G__55874 = chunk__55514_55864;\r\nvar G__55875 = count__55515_55865;\r\nvar G__55876 = (i__55516_55866 + (1));\r\nseq__55513_55863 = G__55873;\r\nchunk__55514_55864 = G__55874;\r\ncount__55515_55865 = G__55875;\r\ni__55516_55866 = G__55876;\r\ncontinue;\r\n} else {\r\nvar temp__5735__auto___55877 = cljs.core.seq(seq__55513_55863);\r\nif(temp__5735__auto___55877){\r\nvar seq__55513_55878__$1 = temp__5735__auto___55877;\r\nif(cljs.core.chunked_seq_QMARK_(seq__55513_55878__$1)){\r\nvar c__4550__auto___55880 = cljs.core.chunk_first(seq__55513_55878__$1);\r\nvar G__55881 = cljs.core.chunk_rest(seq__55513_55878__$1);\r\nvar G__55882 = c__4550__auto___55880;\r\nvar G__55883 = cljs.core.count(c__4550__auto___55880);\r\nvar G__55884 = (0);\r\nseq__55513_55863 = G__55881;\r\nchunk__55514_55864 = G__55882;\r\ncount__55515_55865 = G__55883;\r\ni__55516_55866 = G__55884;\r\ncontinue;\r\n} else {\r\nvar map__55566_55885 = cljs.core.first(seq__55513_55878__$1);\r\nvar map__55566_55886__$1 = (((((!((map__55566_55885 == null))))?(((((map__55566_55885.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__55566_55885.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__55566_55885):map__55566_55885);\r\nvar function_55887 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55566_55886__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\r\nvar file_55888 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55566_55886__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\r\nvar line_55889 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55566_55886__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\r\nvar column_55890 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55566_55886__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\r\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_55887)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_55887),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_55888),(cljs.core.truth_(line_55889)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_55889)].join(''):null),(cljs.core.truth_(column_55890)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_55890)].join(''):null),\")\"].join('')], 0));\r\n\r\n\r\nvar G__55892 = cljs.core.next(seq__55513_55878__$1);\r\nvar G__55893 = null;\r\nvar G__55894 = (0);\r\nvar G__55895 = (0);\r\nseq__55513_55863 = G__55892;\r\nchunk__55514_55864 = G__55893;\r\ncount__55515_55865 = G__55894;\r\ni__55516_55866 = G__55895;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__55497_55858);\r\n\r\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__55496_55857);\r\n}\r\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4661__auto__);\r\n}));\r\n\r\n(cljs.stacktrace.mapped_stacktrace_str.cljs$lang$maxFixedArity = 3);\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/stacktrace.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.stacktrace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.string","^K","~$gstring","^K","~$clojure.string","^M","~$string","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^F",["^V",["^R",["^K","~:as","^L"],["^M","^X","^N"]]]]],"~:flags",["^ ","^R",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^K","^M"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","cljs/stacktrace.cljc"],"~:compiled-at",1589213810579,"~:resource-name","cljs/stacktrace.cljc","~:warnings",[],"~:source",";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__54990","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/parse-stacktrace","repl-env","st","err","opts","cljs.stacktrace/parse-int","s","js/parseInt","cljs.stacktrace/starts-with?","s0","s1","goog.string/startsWith","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__4120__auto__","cljs.stacktrace/parse-file-line-column","flc","cljs.core/not","cljs.core/re-find","vec__55030","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__55033","xs","clojure.string.split.cljs$core$IFn$_invoke$arity$2","pre","line","column","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__55036","p__55037","vec__55038","vec__55041","post","x","i","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core/count","file","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__55046","clojure.string/replace","G__55048","G__55050","p__55057","p__55058","map__55060","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__55061","cljs.stacktrace/parse-file","host","host-port","port","asset-path","urlpat","match","cljs.core/contains?","and__4109__auto__","temp__5733__auto__","asset-root","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/chrome-st-el->frame","st-el","vec__55074","vec__55077","function","cljs.core/first","cljs.core/last","clojure.string/blank?","clojure.string/split-lines","p1__55094#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","p1__55095#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","p1__55097#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__55116","vec__55119","clojure.string/trim","p1__55130#","p1__55131#","p1__55132#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","idx","cljs.stacktrace/firefox-st-el->frame","vec__55163","vec__55166","p1__55172#","p1__55173#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__55174#","p__55305","map__55307","output-dir","frame-str","clojure.string/starts-with?","vec__55363","vec__55366","parts","file&line","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/second","file-part","line-part","col-part","G__55370","parse-source-loc-info","process-frame","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","source-map","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","columns","p1__55380#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","mapped","p1__55381#","p2__55382#","cljs.core/inc","cljs.core/identity","default","adjust","get-best-column","p__55412","map__55414","cljs.stacktrace/mapped-frame","vec__55423","no-source-file?","line'","column'","call","file'","var_args","G__55448","cljs.stacktrace/mapped-stacktrace","js/Error","stacktrace","cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3","cljs.core/PersistentHashMap","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","munged-fn-name","unmunged-call-name","cljs.core/munge","mapped-frames","p1__55445#","cljs.core/memoize","call-merge","p1__55446#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","call->function","G__55484","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__55496","cljs.core/*print-newline*","*print-fn*-orig-val__55497","cljs.core/*print-fn*","*print-newline*-temp-val__55498","*print-fn*-temp-val__55499","x__4662__auto__","seq__55513","cljs.core/seq","chunk__55514","count__55515","i__55516","map__55552","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__55566","cljs.core/next","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic"]]],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1589208773000],["^11","goog/math/math.js"],[1589208774923,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^P","~$goog.array","~$goog.asserts"]]],["^11","goog/array/array.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1D"]]],["^11","goog/debug/error.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/dom/nodetype.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/object/object.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],"~:SHADOW-TIMESTAMP",[1589208783000,1589208773000],["^11","cljs/stacktrace.cljc"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^O","^K","^M"]]],["^11","goog/math/long.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1D","~$goog.reflect"]]],["^11","goog/string/internal.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/functions/functions.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/structs/map.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^11","goog/asserts/asserts.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1C","^1D","^K","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/base.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",[]]],["^11","goog/structs/structs.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1C","~$goog.object"]]],["^11","clojure/string.cljs"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^O","^K","~$goog.string.StringBuffer"]]],["^11","goog/string/string.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","~$goog.string.internal"]]],["^11","goog/reflect/reflect.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/string/stringbuffer.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/iter/iter.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1C","^1D","~$goog.functions","~$goog.math"]]],["^11","cljs/core.cljs"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["~$goog.math.Long","~$goog.math.Integer","^K","^1P","^1C","~$goog.Uri","^1Q"]]],["^11","goog/math/integer.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P"]]],["^11","goog/uri/utils.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^D",[]],"^1B",["^P","^1C","^1D","^K"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/stacktrace.cljc","^7",9,"^8",5,"^9",9,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^K","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^D",["^R"]],"~:shadow/js-access-global",["^D",["RegExp","Error","parseInt"]],"^S",null,"~:defs",["^ ","~$output-directory",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",53,"^8",7,"^9",53,"^:",23,"~:arglists",["^V",["~$quote",["^V",[["~$opts"]]]]]],"^E","~$cljs.stacktrace/output-directory","^6","cljs/stacktrace.cljc","^:",23,"~:method-params",["^V",[["^23"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",53,"~:ret-tag",["^D",["~$any","^N"]],"^9",53,"~:max-fixed-arity",1,"~:fn-var",true,"^21",["^V",["^22",["^V",[["^23"]]]]]],"~$ends-with?",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",43,"^8",7,"^9",43,"^:",17,"^21",["^V",["^22",["^V",[["~$s0","~$s1"]]]]],"~:tag","~$boolean"],"^E","~$cljs.stacktrace/ends-with?","^6","cljs/stacktrace.cljc","^:",17,"^25",["^V",[["^2>","^2?"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",43,"^29","^2A","^9",43,"^2;",2,"^2@","^2A","^2<",true,"^21",["^V",["^22",["^V",[["^2>","^2?"]]]]]],"~$starts-with?",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",37,"^8",7,"^9",37,"^:",19,"^21",["^V",["^22",["^V",[["^2>","^2?"]]]]],"^2@","^2A"],"^E","~$cljs.stacktrace/starts-with?","^6","cljs/stacktrace.cljc","^:",19,"^25",["^V",[["^2>","^2?"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",37,"^29","^2A","^9",37,"^2;",2,"^2@","^2A","^2<",true,"^21",["^V",["^22",["^V",[["^2>","^2?"]]]]]],"~$remove-ext",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",443,"^8",7,"^9",443,"^:",17,"^21",["^V",["^22",["^V",[["~$file"]]]]]],"^E","~$cljs.stacktrace/remove-ext","^6","cljs/stacktrace.cljc","^:",17,"^25",["^V",[["^2F"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",443,"^29","^N","^9",443,"^2;",1,"^2<",true,"^21",["^V",["^22",["^V",[["^2F"]]]]]],"~$string->regex",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",49,"^8",7,"^9",49,"^:",20,"^21",["^V",["^22",["^V",[["~$s"]]]]]],"^E","~$cljs.stacktrace/string->regex","^6","cljs/stacktrace.cljc","^:",20,"^25",["^V",[["~$s"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",49,"^29","~$js/RegExp","^9",49,"^2;",1,"^2<",true,"^21",["^V",["^22",["^V",[["~$s"]]]]]],"~$safari-st-el->frame",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",212,"^8",7,"^9",212,"^:",26,"^21",["^V",["^22",["^V",[["~$repl-env","~$st-el","^23"]]]]]],"^E","~$cljs.stacktrace/safari-st-el->frame","^6","cljs/stacktrace.cljc","^:",26,"^25",["^V",[["^2L","^2M","^23"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",212,"^29",["^D",["~$cljs.core/IMap","~$clj-nil"]],"^9",212,"^2;",3,"^2<",true,"^21",["^V",["^22",["^V",[["^2L","^2M","^23"]]]]]],"~$mapped-frame",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",471,"^8",7,"^9",471,"^:",19,"^21",["^V",["^22",["^V",[[["^ ","~:keys",["~$function","^2F","~$line","~$column"]],"~$sms","^23"]]]]],"~:doc","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"^E","~$cljs.stacktrace/mapped-frame","^6","cljs/stacktrace.cljc","^:",19,"^25",["^V",[["~$p__55412","^2V","^23"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",471,"^29","^2O","^9",471,"^2;",3,"^2<",true,"^21",["^V",["^22",["^V",[[["^ ","^2R",["^2S","^2F","^2T","^2U"]],"^2V","^23"]]]]],"^2W","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"~$firefox-st-el->frame",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",306,"^8",7,"^9",306,"^:",27,"^21",["^V",["^22",["^V",[["^2L","^2M","^23"]]]]]],"^E","~$cljs.stacktrace/firefox-st-el->frame","^6","cljs/stacktrace.cljc","^:",27,"^25",["^V",[["^2L","^2M","^23"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",306,"^29",["^D",["^2O","^2P"]],"^9",306,"^2;",3,"^2<",true,"^21",["^V",["^22",["^V",[["^2L","^2M","^23"]]]]]],"~$firefox-clean-function",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",294,"^8",7,"^9",294,"^:",29,"^21",["^V",["^22",["^V",[["~$f"]]]]]],"^E","~$cljs.stacktrace/firefox-clean-function","^6","cljs/stacktrace.cljc","^:",29,"^25",["^V",[["~$f"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",294,"^29","^N","^9",294,"^2;",1,"^2<",true,"^21",["^V",["^22",["^V",[["~$f"]]]]]],"~$chrome-st-el->frame",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",111,"^8",7,"^9",111,"^:",26,"^21",["^V",["^22",["^V",[["^2L","^2M","^23"]]]]]],"^E","~$cljs.stacktrace/chrome-st-el->frame","^6","cljs/stacktrace.cljc","^:",26,"^25",["^V",[["^2L","^2M","^23"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",111,"^29",["^D",["^2O","^2P"]],"^9",111,"^2;",3,"^2<",true,"^21",["^V",["^22",["^V",[["^2L","^2M","^23"]]]]]],"~$mapped-line-column-call",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",450,"^8",7,"^9",450,"^:",30,"^21",["^V",["^22",["^V",[["^2V","^2F","^2T","^2U"]]]]],"^2W","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"^E","~$cljs.stacktrace/mapped-line-column-call","^6","cljs/stacktrace.cljc","^:",30,"^25",["^V",[["^2V","^2F","^2T","^2U"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",450,"^9",450,"^2;",4,"^2<",true,"^21",["^V",["^22",["^V",[["^2V","^2F","^2T","^2U"]]]]],"^2W","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"~$mapped-stacktrace-str",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",528,"^8",7,"^9",528,"^:",28,"^21",["^V",["^22",["^V",[["~$stacktrace","^2V"],["^37","^2V","^23"]]]]],"^2W","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","~:top-fn",["^ ","^28",false,"~:fixed-arity",3,"^2;",3,"^25",[["^37","^2V"],["^37","^2V","^23"]],"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^27",["^V",[null,null]]]],"^E","~$cljs.stacktrace/mapped-stacktrace-str","^6","cljs/stacktrace.cljc","^:",28,"^38",["^ ","^28",false,"^39",3,"^2;",3,"^25",[["^37","^2V"],["^37","^2V","^23"]],"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^27",["^V",[null,null]]],"^25",[["^37","^2V"],["^37","^2V","^23"]],"^26",null,"^39",3,"^27",["^V",[null,null]],"^8",1,"^28",false,"~:methods",[["^ ","^39",2,"^28",false,"^2@","^2:"],["^ ","^39",3,"^28",false,"^2@","^N"]],"^7",528,"^9",528,"^2;",3,"^2<",true,"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^2W","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace."],"~$mapped-stacktrace",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",491,"^8",7,"^9",491,"^:",24,"^21",["^V",["^22",["^V",[["^37","^2V"],["^37","^2V","^23"]]]]],"^2W","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","^38",["^ ","^28",false,"^39",3,"^2;",3,"^25",[["^37","^2V"],["^37","^2V","^23"]],"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^27",["^V",[null,null]]]],"^E","~$cljs.stacktrace/mapped-stacktrace","^6","cljs/stacktrace.cljc","^:",24,"^38",["^ ","^28",false,"^39",3,"^2;",3,"^25",[["^37","^2V"],["^37","^2V","^23"]],"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^27",["^V",[null,null]]],"^25",[["^37","^2V"],["^37","^2V","^23"]],"^26",null,"^39",3,"^27",["^V",[null,null]],"^8",1,"^28",false,"^3;",[["^ ","^39",2,"^28",false,"^2@","^2:"],["^ ","^39",3,"^28",false]],"^7",491,"^9",491,"^2;",3,"^2<",true,"^21",["^V",[["^37","^2V"],["^37","^2V","^23"]]],"^2W","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath."],"~$parse-stacktrace",["^ ","^5",["^ ","^6","cljs/stacktrace.cljc","^7",17,"^8",11,"^9",17,"^:",27,"^2W","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"^E","~$cljs.stacktrace/parse-stacktrace","^6","cljs/stacktrace.cljc","^:",27,"^8",1,"^7",17,"^9",17,"^2@","~$cljs.core/MultiFn","^2W","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"~$parse-int",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",33,"^8",7,"^9",33,"^:",16,"^21",["^V",["^22",["^V",[["~$s"]]]]]],"^E","~$cljs.stacktrace/parse-int","^6","cljs/stacktrace.cljc","^:",16,"^25",["^V",[["~$s"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",33,"^29","~$js","^9",33,"^2;",1,"^2<",true,"^21",["^V",["^22",["^V",[["~$s"]]]]]],"~$parse-file",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",81,"^8",7,"^9",81,"^:",17,"^21",["^V",["^22",["^V",[[["^ ","^2R",["~$host","~$host-port","~$port"],"^X","^2L"],"^2F",["^ ","^2R",["~$asset-path"],"^X","^23"]]]]]],"^2W","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"^E","~$cljs.stacktrace/parse-file","^6","cljs/stacktrace.cljc","^:",17,"^25",["^V",[["~$p__55057","^2F","~$p__55058"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",81,"^29","^N","^9",81,"^2;",3,"^2<",true,"^21",["^V",["^22",["^V",[[["^ ","^2R",["^3E","^3F","^3G"],"^X","^2L"],"^2F",["^ ","^2R",["^3H"],"^X","^23"]]]]]],"^2W","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"~$parse-file-line-column",["^ ","^20",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",60,"^8",7,"^9",60,"^:",29,"^21",["^V",["^22",["^V",[["~$flc"]]]]]],"^E","~$cljs.stacktrace/parse-file-line-column","^6","cljs/stacktrace.cljc","^:",29,"^25",["^V",[["^3M"]]],"^26",null,"^27",["^V",[null,null]],"^8",1,"^28",false,"^7",60,"^29","~$cljs.core/IVector","^9",60,"^2;",1,"^2<",true,"^21",["^V",["^22",["^V",[["^3M"]]]]]]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^D",["~:asset-root","~:output-dir","~:ua-product","~:safari","~:else","~:call","~:default","^E","^6","~:nodejs","~:type","~:port","~:function","^8","~:firefox","~:reason","~:asset-path","~:host","~:parse-stacktrace","^7","~:chrome","~:relativize-url","~:col","~:hierarchy","~:host-port"]],"~:order",["^48","^3S","^3W","^3R","^43","^49","^3Z","^42","^3Q","^3Y","^41","^44","^46","^6","^3[","^7","^8","^45","^3T","^3U","^40","^3X","^47","^E","^3V"]],"^Y",["^ ","^R",["^D",[]]],"^Z",["^ "],"^[",["^P","^O","^K","^M"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1=",[["^4=","~:static-fns"],true,["^4=","~:elide-asserts"],false,["^4=","~:optimize-constants"],null,["^4=","^14"],null,["^4=","~:external-config"],null,["^4=","~:tooling-config"],null,["^4=","~:emit-constants"],null,["^4=","~:load-tests"],null,["^4=","~:infer-externs"],true,["^4=","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4=","~:fn-invoke-direct"],null,["^4=","~:source-map"],"/dev/null"]]]