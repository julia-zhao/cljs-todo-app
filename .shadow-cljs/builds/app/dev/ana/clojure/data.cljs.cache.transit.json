["^ ","~:output",["^ ","~:js","goog.provide('clojure.data');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.set');\r\n/**\r\n * Internal helper for diff.\r\n */\r\nclojure.data.atom_diff = (function clojure$data$atom_diff(a,b){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a,b)){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,a], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [a,b,null], null);\r\n}\r\n});\r\n/**\r\n * Convert an associative-by-numeric-index collection into\r\n * an equivalent vector, with nil for any missing keys\r\n */\r\nclojure.data.vectorize = (function clojure$data$vectorize(m){\r\nif(cljs.core.seq(m)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__55137){\r\nvar vec__55138 = p__55137;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55138,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55138,(1),null);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,k,v);\r\n}),cljs.core.vec(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.keys(m)),null)),m);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Diff associative things a and b, comparing only the key k.\r\n */\r\nclojure.data.diff_associative_key = (function clojure$data$diff_associative_key(a,b,k){\r\nvar va = cljs.core.get.cljs$core$IFn$_invoke$arity$2(a,k);\r\nvar vb = cljs.core.get.cljs$core$IFn$_invoke$arity$2(b,k);\r\nvar vec__55147 = clojure.data.diff(va,vb);\r\nvar a_STAR_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55147,(0),null);\r\nvar b_STAR_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55147,(1),null);\r\nvar ab = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55147,(2),null);\r\nvar in_a = cljs.core.contains_QMARK_(a,k);\r\nvar in_b = cljs.core.contains_QMARK_(b,k);\r\nvar same = ((in_a) && (in_b) && ((((!((ab == null)))) || ((((va == null)) && ((vb == null)))))));\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((in_a) && ((((!((a_STAR_ == null)))) || ((!(same)))))))?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,a_STAR_]):null),((((in_b) && ((((!((b_STAR_ == null)))) || ((!(same)))))))?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,b_STAR_]):null),((same)?cljs.core.PersistentArrayMap.createAsIfByAssoc([k,ab]):null)], null);\r\n});\r\n/**\r\n * Diff associative things a and b, comparing only keys in ks (if supplied).\r\n */\r\nclojure.data.diff_associative = (function clojure$data$diff_associative(var_args){\r\nvar G__55171 = arguments.length;\r\nswitch (G__55171) {\r\ncase 2:\r\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$2 = (function (a,b){\r\nreturn clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3(a,b,clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(a),cljs.core.keys(b)));\r\n}));\r\n\r\n(clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3 = (function (a,b,ks){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (diff1,diff2){\r\nreturn cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,diff1,diff2));\r\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,null], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(clojure.data.diff_associative_key,a,b),ks));\r\n}));\r\n\r\n(clojure.data.diff_associative.cljs$lang$maxFixedArity = 3);\r\n\r\nclojure.data.diff_sequential = (function clojure$data$diff_sequential(a,b){\r\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.data.vectorize,clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3(((cljs.core.vector_QMARK_(a))?a:cljs.core.vec(a)),((cljs.core.vector_QMARK_(b))?b:cljs.core.vec(b)),cljs.core.range.cljs$core$IFn$_invoke$arity$1((function (){var x__4208__auto__ = cljs.core.count(a);\r\nvar y__4209__auto__ = cljs.core.count(b);\r\nreturn ((x__4208__auto__ > y__4209__auto__) ? x__4208__auto__ : y__4209__auto__);\r\n})()))));\r\n});\r\nclojure.data.diff_set = (function clojure$data$diff_set(a,b){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_empty(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(a,b)),cljs.core.not_empty(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(b,a)),cljs.core.not_empty(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(a,b))], null);\r\n});\r\n\r\n/**\r\n * Implementation detail. Subject to change.\r\n * @interface\r\n */\r\nclojure.data.EqualityPartition = function(){};\r\n\r\nvar clojure$data$EqualityPartition$equality_partition$dyn_55400 = (function (x){\r\nvar x__4422__auto__ = (((x == null))?null:x);\r\nvar m__4423__auto__ = (clojure.data.equality_partition[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4423__auto__.call(null,x));\r\n} else {\r\nvar m__4420__auto__ = (clojure.data.equality_partition[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4420__auto__.call(null,x));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"EqualityPartition.equality-partition\",x);\r\n}\r\n}\r\n});\r\n/**\r\n * Implementation detail. Subject to change.\r\n */\r\nclojure.data.equality_partition = (function clojure$data$equality_partition(x){\r\nif((((!((x == null)))) && ((!((x.clojure$data$EqualityPartition$equality_partition$arity$1 == null)))))){\r\nreturn x.clojure$data$EqualityPartition$equality_partition$arity$1(x);\r\n} else {\r\nreturn clojure$data$EqualityPartition$equality_partition$dyn_55400(x);\r\n}\r\n});\r\n\r\n\r\n/**\r\n * Implementation detail. Subject to change.\r\n * @interface\r\n */\r\nclojure.data.Diff = function(){};\r\n\r\nvar clojure$data$Diff$diff_similar$dyn_55409 = (function (a,b){\r\nvar x__4422__auto__ = (((a == null))?null:a);\r\nvar m__4423__auto__ = (clojure.data.diff_similar[goog.typeOf(x__4422__auto__)]);\r\nif((!((m__4423__auto__ == null)))){\r\nreturn (m__4423__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4423__auto__.cljs$core$IFn$_invoke$arity$2(a,b) : m__4423__auto__.call(null,a,b));\r\n} else {\r\nvar m__4420__auto__ = (clojure.data.diff_similar[\"_\"]);\r\nif((!((m__4420__auto__ == null)))){\r\nreturn (m__4420__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4420__auto__.cljs$core$IFn$_invoke$arity$2(a,b) : m__4420__auto__.call(null,a,b));\r\n} else {\r\nthrow cljs.core.missing_protocol(\"Diff.diff-similar\",a);\r\n}\r\n}\r\n});\r\n/**\r\n * Implementation detail. Subject to change.\r\n */\r\nclojure.data.diff_similar = (function clojure$data$diff_similar(a,b){\r\nif((((!((a == null)))) && ((!((a.clojure$data$Diff$diff_similar$arity$2 == null)))))){\r\nreturn a.clojure$data$Diff$diff_similar$arity$2(a,b);\r\n} else {\r\nreturn clojure$data$Diff$diff_similar$dyn_55409(a,b);\r\n}\r\n});\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"null\",true);\r\n\r\nvar G__55197_55417 = clojure.data.equality_partition;\r\nvar G__55198_55418 = \"null\";\r\nvar G__55199_55419 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n});\r\ngoog.object.set(G__55197_55417,G__55198_55418,G__55199_55419);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"string\",true);\r\n\r\nvar G__55205_55420 = clojure.data.equality_partition;\r\nvar G__55206_55421 = \"string\";\r\nvar G__55207_55422 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n});\r\ngoog.object.set(G__55205_55420,G__55206_55421,G__55207_55422);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"number\",true);\r\n\r\nvar G__55208_55426 = clojure.data.equality_partition;\r\nvar G__55209_55427 = \"number\";\r\nvar G__55210_55428 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n});\r\ngoog.object.set(G__55208_55426,G__55209_55427,G__55210_55428);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"array\",true);\r\n\r\nvar G__55213_55435 = clojure.data.equality_partition;\r\nvar G__55214_55436 = \"array\";\r\nvar G__55215_55437 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960);\r\n});\r\ngoog.object.set(G__55213_55435,G__55214_55436,G__55215_55437);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"function\",true);\r\n\r\nvar G__55216_55441 = clojure.data.equality_partition;\r\nvar G__55217_55442 = \"function\";\r\nvar G__55218_55443 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n});\r\ngoog.object.set(G__55216_55441,G__55217_55442,G__55218_55443);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"boolean\",true);\r\n\r\nvar G__55219_55450 = clojure.data.equality_partition;\r\nvar G__55220_55451 = \"boolean\";\r\nvar G__55221_55452 = (function (x){\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n});\r\ngoog.object.set(G__55219_55450,G__55220_55451,G__55221_55452);\r\n\r\ngoog.object.set(clojure.data.EqualityPartition,\"_\",true);\r\n\r\nvar G__55225_55458 = clojure.data.equality_partition;\r\nvar G__55226_55459 = \"_\";\r\nvar G__55227_55460 = (function (x){\r\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (1024))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x))){\r\nreturn new cljs.core.Keyword(null,\"map\",\"map\",1371690461);\r\n} else {\r\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (4096))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x))){\r\nreturn new cljs.core.Keyword(null,\"set\",\"set\",304602554);\r\n} else {\r\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (16777216))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x))){\r\nreturn new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960);\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653);\r\n\r\n}\r\n}\r\n}\r\n});\r\ngoog.object.set(G__55225_55458,G__55226_55459,G__55227_55460);\r\ngoog.object.set(clojure.data.Diff,\"null\",true);\r\n\r\nvar G__55238_55471 = clojure.data.diff_similar;\r\nvar G__55239_55472 = \"null\";\r\nvar G__55240_55473 = (function (a,b){\r\nreturn clojure.data.atom_diff(a,b);\r\n});\r\ngoog.object.set(G__55238_55471,G__55239_55472,G__55240_55473);\r\n\r\ngoog.object.set(clojure.data.Diff,\"string\",true);\r\n\r\nvar G__55241_55478 = clojure.data.diff_similar;\r\nvar G__55242_55479 = \"string\";\r\nvar G__55243_55480 = (function (a,b){\r\nreturn clojure.data.atom_diff(a,b);\r\n});\r\ngoog.object.set(G__55241_55478,G__55242_55479,G__55243_55480);\r\n\r\ngoog.object.set(clojure.data.Diff,\"number\",true);\r\n\r\nvar G__55247_55486 = clojure.data.diff_similar;\r\nvar G__55248_55487 = \"number\";\r\nvar G__55249_55488 = (function (a,b){\r\nreturn clojure.data.atom_diff(a,b);\r\n});\r\ngoog.object.set(G__55247_55486,G__55248_55487,G__55249_55488);\r\n\r\ngoog.object.set(clojure.data.Diff,\"array\",true);\r\n\r\nvar G__55258_55491 = clojure.data.diff_similar;\r\nvar G__55259_55492 = \"array\";\r\nvar G__55260_55493 = (function (a,b){\r\nreturn clojure.data.diff_sequential(a,b);\r\n});\r\ngoog.object.set(G__55258_55491,G__55259_55492,G__55260_55493);\r\n\r\ngoog.object.set(clojure.data.Diff,\"function\",true);\r\n\r\nvar G__55275_55504 = clojure.data.diff_similar;\r\nvar G__55276_55505 = \"function\";\r\nvar G__55277_55506 = (function (a,b){\r\nreturn clojure.data.atom_diff(a,b);\r\n});\r\ngoog.object.set(G__55275_55504,G__55276_55505,G__55277_55506);\r\n\r\ngoog.object.set(clojure.data.Diff,\"boolean\",true);\r\n\r\nvar G__55281_55521 = clojure.data.diff_similar;\r\nvar G__55282_55522 = \"boolean\";\r\nvar G__55283_55523 = (function (a,b){\r\nreturn clojure.data.atom_diff(a,b);\r\n});\r\ngoog.object.set(G__55281_55521,G__55282_55522,G__55283_55523);\r\n\r\ngoog.object.set(clojure.data.Diff,\"_\",true);\r\n\r\nvar G__55286_55527 = clojure.data.diff_similar;\r\nvar G__55287_55528 = \"_\";\r\nvar G__55288_55529 = (function (a,b){\r\nvar fexpr__55333 = (function (){var G__55334 = clojure.data.equality_partition(a);\r\nvar G__55334__$1 = (((G__55334 instanceof cljs.core.Keyword))?G__55334.fqn:null);\r\nswitch (G__55334__$1) {\r\ncase \"atom\":\r\nreturn clojure.data.atom_diff;\r\n\r\nbreak;\r\ncase \"set\":\r\nreturn clojure.data.diff_set;\r\n\r\nbreak;\r\ncase \"sequential\":\r\nreturn clojure.data.diff_sequential;\r\n\r\nbreak;\r\ncase \"map\":\r\nreturn clojure.data.diff_associative;\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__55334__$1)].join('')));\r\n\r\n}\r\n})();\r\nreturn (fexpr__55333.cljs$core$IFn$_invoke$arity$2 ? fexpr__55333.cljs$core$IFn$_invoke$arity$2(a,b) : fexpr__55333.call(null,a,b));\r\n});\r\ngoog.object.set(G__55286_55527,G__55287_55528,G__55288_55529);\r\n/**\r\n * Recursively compares a and b, returning a tuple of\r\n *   [things-only-in-a things-only-in-b things-in-both].\r\n *   Comparison rules:\r\n * \r\n *   * For equal a and b, return [nil nil a].\r\n *   * Maps are subdiffed where keys match and values differ.\r\n *   * Sets are never subdiffed.\r\n *   * All sequential things are treated as associative collections\r\n *  by their indexes, with results returned as vectors.\r\n *   * Everything else (including strings!) is treated as\r\n *  an atom and compared for equality.\r\n */\r\nclojure.data.diff = (function clojure$data$diff(a,b){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a,b)){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,a], null);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.equality_partition(a),clojure.data.equality_partition(b))){\r\nreturn clojure.data.diff_similar(a,b);\r\n} else {\r\nreturn clojure.data.atom_diff(a,b);\r\n}\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/data.cljs","~:line",12,"~:column",3,"~:end-line",12,"~:end-column",15,"~:author","Stuart Halloway","~:doc","Non-core data functions."],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.data","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^M","~$set","^M","~$cljs.core","^O","~$goog","^P"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^H",["^V",["^R",["^M","~:as","^N"]]]]],"~:flags",["^ ","^R",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^P","^O","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/data.cljs"],"~:compiled-at",1589213810487,"~:resource-name","clojure/data.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns \n  ^{:author \"Stuart Halloway\",\n    :doc \"Non-core data functions.\"}\n  clojure.data\n  (:require [clojure.set :as set]))\n\n(declare ^{:arglists '([a b])} diff)\n\n(defn- atom-diff\n  \"Internal helper for diff.\"\n  [a b]\n  (if (= a b) [nil nil a] [a b nil]))\n\n;; for big things a sparse vector class would be better\n(defn- vectorize\n  \"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys\"\n  [m]\n  (when (seq m)\n    (reduce\n     (fn [result [k v]] (assoc result k v))\n     (vec (repeat (apply max (keys m))  nil))\n     m)))\n\n(defn- diff-associative-key\n  \"Diff associative things a and b, comparing only the key k.\"\n  [a b k]\n  (let [va (get a k)\n        vb (get b k)\n        [a* b* ab] (diff va vb)\n        in-a (contains? a k)\n        in-b (contains? b k)\n        same (and in-a in-b\n                  (or (not (nil? ab))\n                      (and (nil? va) (nil? vb))))]\n    [(when (and in-a (or (not (nil? a*)) (not same))) {k a*})\n     (when (and in-b (or (not (nil? b*)) (not same))) {k b*})\n     (when same {k ab})\n     ]))\n\n(defn- diff-associative\n  \"Diff associative things a and b, comparing only keys in ks (if supplied).\"\n  ([a b]\n     (diff-associative a b (set/union (keys a) (keys b))))\n  ([a b ks]\n     (reduce\n      (fn [diff1 diff2]\n        (doall (map merge diff1 diff2)))\n      [nil nil nil]\n      (map\n       (partial diff-associative-key a b)\n       ks))))\n\n(defn- diff-sequential\n  [a b]\n  (vec (map vectorize (diff-associative\n                       (if (vector? a) a (vec a))\n                       (if (vector? b) b (vec b))\n                       (range (max (count a) (count b)))))))\n\n(defn- diff-set\n  [a b]\n  [(not-empty (set/difference a b))\n   (not-empty (set/difference b a))\n   (not-empty (set/intersection a b))])\n\n(defprotocol EqualityPartition\n  \"Implementation detail. Subject to change.\"\n  (equality-partition [x] \"Implementation detail. Subject to change.\"))\n\n(defprotocol Diff\n  \"Implementation detail. Subject to change.\"\n  (diff-similar [a b] \"Implementation detail. Subject to change.\"))\n\n(extend-protocol EqualityPartition\n  nil\n  (equality-partition [x] :atom)\n\n  string\n  (equality-partition [x] :atom)\n\n  number\n  (equality-partition [x] :atom)\n\n  array\n  (equality-partition [x] :sequential)\n\n  function\n  (equality-partition [x] :atom)\n\n  boolean\n  (equality-partition [x] :atom)\n\n  default\n  (equality-partition [x]\n    (cond\n     (satisfies? IMap x) :map\n     (satisfies? ISet x) :set\n     (satisfies? ISequential x) :sequential\n     :default :atom)))\n\n(extend-protocol Diff\n  nil\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  string\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  number\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  array\n  (diff-similar [a b]\n    (diff-sequential a b))\n\n  function\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  boolean\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  default\n  (diff-similar [a b]\n    ((case (equality-partition a)\n       :atom atom-diff\n       :set diff-set\n       :sequential diff-sequential\n       :map diff-associative)\n     a b)))\n\n(defn diff\n  \"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.\"\n  [a b]\n  (if (= a b)\n    [nil nil a]\n    (if (= (equality-partition a) (equality-partition b))\n      (diff-similar a b)\n      (atom-diff a b))))\n  \n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.data/atom-diff","a","b","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data/vectorize","m","cljs.core/seq","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__55137","vec__55138","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","result","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core/keys","clojure.data/diff-associative-key","vec__55147","va","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vb","a*","b*","ab","clojure.data/diff","in-a","cljs.core/contains?","in-b","same","var_args","G__55171","clojure.data/diff-associative","js/Error","clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3","clojure.set.union.cljs$core$IFn$_invoke$arity$2","ks","diff1","diff2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","clojure.data/diff-sequential","cljs.core/vector?","cljs.core.range.cljs$core$IFn$_invoke$arity$1","x__4208__auto__","y__4209__auto__","cljs.core/count","clojure.data/diff-set","cljs.core/not-empty","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","clojure$data$EqualityPartition$equality_partition$dyn","x__4422__auto__","m__4423__auto__","clojure.data/equality-partition","goog/typeOf","m__4420__auto__","cljs.core/missing-protocol","clojure.data/EqualityPartition","x","clojure$data$Diff$diff_similar$dyn","clojure.data/diff-similar","clojure.data/Diff","goog.object/set","G__55197","G__55198","G__55199","G__55205","G__55206","G__55207","G__55208","G__55209","G__55210","G__55213","G__55214","G__55215","G__55216","G__55217","G__55218","G__55219","G__55220","G__55221","G__55225","G__55226","G__55227","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IMap","cljs.core/ISet","cljs.core/ISequential","G__55238","G__55239","G__55240","G__55241","G__55242","G__55243","G__55247","G__55248","G__55249","G__55258","G__55259","G__55260","G__55275","G__55276","G__55277","G__55281","G__55282","G__55283","G__55286","G__55287","G__55288","fexpr__55333","G__55334","cljs.core/Keyword"]]],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1589208773000],["^11","goog/math/math.js"],[1589208774923,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^P","~$goog.array","~$goog.asserts"]]],["^11","goog/array/array.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1D"]]],["^11","goog/debug/error.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/dom/nodetype.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/object/object.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],"~:SHADOW-TIMESTAMP",[1589208783000,1589208773000],["^11","goog/math/long.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1D","~$goog.reflect"]]],["^11","goog/string/internal.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/functions/functions.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/structs/map.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^11","goog/asserts/asserts.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1C","^1D","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/base.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",[]]],["^11","goog/structs/structs.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1C","~$goog.object"]]],["^11","goog/string/string.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","~$goog.string.internal"]]],["^11","clojure/data.cljs"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^O","^M"]]],["^11","goog/reflect/reflect.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/string/stringbuffer.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","goog/iter/iter.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1C","^1D","~$goog.functions","~$goog.math"]]],["^11","cljs/core.cljs"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["~$goog.math.Long","~$goog.math.Integer","^1K","^1Q","^1C","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/math/integer.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P"]]],["^11","clojure/set.cljs"],[1589208773847,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^O"]]],["^11","goog/uri/utils.js"],[1589208774923,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^P","^1C","^1D","^1K"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/data.cljs","^7",12,"^8",3,"^9",12,"^:",15,"^;","Stuart Halloway","^<","Non-core data functions."],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"~:shadow/protocol-prefixes",["^F",["clojure$data$EqualityPartition$","clojure$data$Diff$"]],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^P"],"^Q",["^F",["^R"]],"~:shadow/js-access-global",["^F",["Error"]],"^S",null,"~:defs",["^ ","~$vectorize",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/data.cljs","^7",23,"^8",8,"^9",23,"^:",17,"~:private",true,"~:arglists",["^V",["~$quote",["^V",[["~$m"]]]]],"^<","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"^23",true,"^G","~$clojure.data/vectorize","^6","clojure/data.cljs","^:",17,"~:method-params",["^V",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",23,"~:ret-tag",["^F",[null,"~$any","~$clj-nil"]],"^9",23,"~:max-fixed-arity",1,"~:fn-var",true,"^24",["^V",["^25",["^V",[["~$m"]]]]],"^<","Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys"],"~$diff",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",144,"^8",7,"^9",144,"^:",11,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]],"^<","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"^G","~$clojure.data/diff","^6","clojure/data.cljs","^:",11,"^27",["^V",[["~$a","~$b"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",144,"^2;",["^F",["~$cljs.core/IVector","^2<"]],"^9",144,"^2>",2,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]],"^<","Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality."],"~$atom-diff",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",17,"^8",8,"^9",17,"^:",17,"^23",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]],"^<","Internal helper for diff."],"^23",true,"^G","~$clojure.data/atom-diff","^6","clojure/data.cljs","^:",17,"^27",["^V",[["~$a","~$b"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",17,"^2;","^2B","^9",17,"^2>",2,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]],"^<","Internal helper for diff."],"~$diff-set",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",69,"^8",8,"^9",69,"^:",16,"^23",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]]],"^23",true,"^G","~$clojure.data/diff-set","^6","clojure/data.cljs","^:",16,"^27",["^V",[["~$a","~$b"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",69,"^2;","^2B","^9",69,"^2>",2,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]]],"~$equality-partition",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",77,"^8",4,"^9",77,"^:",22,"~:protocol","~$clojure.data/EqualityPartition","^<","Implementation detail. Subject to change.","^24",["^V",["^25",["^V",[["~$x"]]]]]],"^2H","^2I","^G","~$clojure.data/equality-partition","^6","clojure/data.cljs","^:",22,"^27",["^V",[["~$x"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",75,"^2;","^2<","^9",77,"^2>",1,"^2?",true,"^24",["^V",["^25",["^V",[["~$x"]]]]],"^<","Implementation detail. Subject to change."],"~$EqualityPartition",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","clojure/data.cljs","^:",31,"^8",14,"^7",75,"~:protocol-info",["^ ","~:methods",["^ ","^2G",[["~$x"]]]],"^9",75,"~:sigs",["^ ","~:equality-partition",["^ ","^G","^2G","^24",["^V",[["~$x"]]],"^<","Implementation detail. Subject to change."]],"^<","Implementation detail. Subject to change.","~:jsdoc",["^V",["@interface"]]],"^2L",true,"^G","^2I","^6","clojure/data.cljs","^:",31,"^8",1,"^7",75,"^2M",["^ ","^2N",["^ ","^2G",[["~$x"]]]],"~:info",null,"^9",75,"~:tag","^2<","^2O",["^ ","^2P",["^ ","^G","^2G","^24",["^V",[["~$x"]]],"^<","Implementation detail. Subject to change."]],"~:impls",["^F",[null,"~$boolean","~$number","~$default","~$array","~$string","~$function"]],"^<","Implementation detail. Subject to change.","^2Q",["^V",["@interface"]]],"~$diff-associative",["^ ","^22",null,"^5",["^ ","^23",true,"^6","clojure/data.cljs","^:",24,"~:top-fn",["^ ","^2:",false,"~:fixed-arity",3,"^2>",3,"^27",[["~$a","~$b"],["~$a","~$b","~$ks"]],"^24",["^V",[["~$a","~$b"],["~$a","~$b","^32"]]],"^29",["^V",[null,null]]],"^8",8,"^7",49,"^9",49,"^24",["^V",["^25",["^V",[["~$a","~$b"],["~$a","~$b","^32"]]]]],"^<","Diff associative things a and b, comparing only keys in ks (if supplied)."],"^23",true,"^G","~$clojure.data/diff-associative","^6","clojure/data.cljs","^:",24,"^30",["^ ","^2:",false,"^31",3,"^2>",3,"^27",[["~$a","~$b"],["~$a","~$b","^32"]],"^24",["^V",[["~$a","~$b"],["~$a","~$b","^32"]]],"^29",["^V",[null,null]]],"^27",[["~$a","~$b"],["~$a","~$b","^32"]],"^28",null,"^31",3,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^2N",[["^ ","^31",2,"^2:",false,"^2S","^2<"],["^ ","^31",3,"^2:",false,"^2S",["^F",[null,"^2<"]]]],"^7",49,"^9",49,"^2>",3,"^2?",true,"^24",["^V",[["~$a","~$b"],["~$a","~$b","^32"]]],"^<","Diff associative things a and b, comparing only keys in ks (if supplied)."],"~$diff-associative-key",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",33,"^8",8,"^9",33,"^:",28,"^23",true,"^24",["^V",["^25",["^V",[["~$a","~$b","~$k"]]]]],"^<","Diff associative things a and b, comparing only the key k."],"^23",true,"^G","~$clojure.data/diff-associative-key","^6","clojure/data.cljs","^:",28,"^27",["^V",[["~$a","~$b","~$k"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",33,"^2;","^2B","^9",33,"^2>",3,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b","~$k"]]]]],"^<","Diff associative things a and b, comparing only the key k."],"~$diff-similar",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",81,"^8",4,"^9",81,"^:",16,"^2H","~$clojure.data/Diff","^<","Implementation detail. Subject to change.","^24",["^V",["^25",["^V",[["~$a","~$b"]]]]]],"^2H","^37","^G","~$clojure.data/diff-similar","^6","clojure/data.cljs","^:",16,"^27",["^V",[["~$a","~$b"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",79,"^2;","^2<","^9",81,"^2>",2,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]],"^<","Implementation detail. Subject to change."],"~$Diff",["^ ","^5",["^ ","^2L",true,"^6","clojure/data.cljs","^:",18,"^8",14,"^7",79,"^2M",["^ ","^2N",["^ ","^36",[["~$a","~$b"]]]],"^9",79,"^2O",["^ ","~:diff-similar",["^ ","^G","^36","^24",["^V",[["~$a","~$b"]]],"^<","Implementation detail. Subject to change."]],"^<","Implementation detail. Subject to change.","^2Q",["^V",["@interface"]]],"^2L",true,"^G","^37","^6","clojure/data.cljs","^:",18,"^8",1,"^7",79,"^2M",["^ ","^2N",["^ ","^36",[["~$a","~$b"]]]],"^2R",null,"^9",79,"^2S","^2<","^2O",["^ ","^3:",["^ ","^G","^36","^24",["^V",[["~$a","~$b"]]],"^<","Implementation detail. Subject to change."]],"^2T",["^F",[null,"^2U","^2V","^2W","^2X","^2Y","^2Z"]],"^<","Implementation detail. Subject to change.","^2Q",["^V",["@interface"]]],"~$diff-sequential",["^ ","^22",null,"^5",["^ ","^6","clojure/data.cljs","^7",62,"^8",8,"^9",62,"^:",23,"^23",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]]],"^23",true,"^G","~$clojure.data/diff-sequential","^6","clojure/data.cljs","^:",23,"^27",["^V",[["~$a","~$b"]]],"^28",null,"^29",["^V",[null,null]],"^8",1,"^2:",false,"^7",62,"^2;",["^F",["~$clj","^2B","^2<","~$cljs.core/MetaFn","^2="]],"^9",62,"^2>",2,"^2?",true,"^24",["^V",["^25",["^V",[["~$a","~$b"]]]]]]],"^T",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^F",["~:default","~:sequential","~:set","~:atom","~:map"]],"~:order",["^3C","^3A","^3D","^3B","^3@"]],"^Y",["^ ","^R",["^F",[]]],"^Z",["^ "],"^[",["^P","^O","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1=",[["^3H","~:static-fns"],true,["^3H","~:elide-asserts"],false,["^3H","~:optimize-constants"],null,["^3H","^14"],null,["^3H","~:external-config"],null,["^3H","~:tooling-config"],null,["^3H","~:emit-constants"],null,["^3H","~:load-tests"],null,["^3H","~:infer-externs"],true,["^3H","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3H","~:fn-invoke-direct"],null,["^3H","~:source-map"],"/dev/null"]]]