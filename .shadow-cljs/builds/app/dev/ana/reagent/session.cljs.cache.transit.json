["^ ","~:output",["^ ","~:js","goog.provide('reagent.session');\r\ngoog.require('cljs.core');\r\ngoog.require('reagent.core');\r\nif((typeof reagent !== 'undefined') && (typeof reagent.session !== 'undefined') && (typeof reagent.session.state !== 'undefined')){\r\n} else {\r\nreagent.session.state = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n/**\r\n * Returns a cursor from the state atom.\r\n */\r\nreagent.session.cursor = (function reagent$session$cursor(ks){\r\nreturn reagent.core.cursor(reagent.session.state,ks);\r\n});\r\n/**\r\n * Get the key's value from the session, returns nil if it doesn't exist.\r\n */\r\nreagent.session.get = (function reagent$session$get(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64941 = arguments.length;\r\nvar i__4731__auto___64942 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64942 < len__4730__auto___64941)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64942]));\r\n\r\nvar G__64943 = (i__4731__auto___64942 + (1));\r\ni__4731__auto___64942 = G__64943;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\r\nreturn reagent.session.get.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.get.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__64803){\r\nvar vec__64804 = p__64803;\r\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64804,(0),null);\r\nvar temp_a = cljs.core.deref(reagent.session.cursor(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)));\r\nif((!((temp_a == null)))){\r\nreturn temp_a;\r\n} else {\r\nreturn default$;\r\n}\r\n}));\r\n\r\n(reagent.session.get.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(reagent.session.get.cljs$lang$applyTo = (function (seq64788){\r\nvar G__64789 = cljs.core.first(seq64788);\r\nvar seq64788__$1 = cljs.core.next(seq64788);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64789,seq64788__$1);\r\n}));\r\n\r\nreagent.session.put_BANG_ = (function reagent$session$put_BANG_(k,v){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc,k,v);\r\n});\r\n/**\r\n * Gets the value at the path specified by the vector ks from the session,\r\n *   returns nil if it doesn't exist.\r\n */\r\nreagent.session.get_in = (function reagent$session$get_in(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64952 = arguments.length;\r\nvar i__4731__auto___64954 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64954 < len__4730__auto___64952)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64954]));\r\n\r\nvar G__64955 = (i__4731__auto___64954 + (1));\r\ni__4731__auto___64954 = G__64955;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\r\nreturn reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__64820){\r\nvar vec__64822 = p__64820;\r\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64822,(0),null);\r\nvar result = cljs.core.deref(reagent.session.cursor(ks));\r\nif((!((result == null)))){\r\nreturn result;\r\n} else {\r\nreturn default$;\r\n}\r\n}));\r\n\r\n(reagent.session.get_in.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(reagent.session.get_in.cljs$lang$applyTo = (function (seq64810){\r\nvar G__64811 = cljs.core.first(seq64810);\r\nvar seq64810__$1 = cljs.core.next(seq64810);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64811,seq64810__$1);\r\n}));\r\n\r\n/**\r\n * Replace the current session's value with the result of executing f with\r\n *   the current value and args.\r\n */\r\nreagent.session.swap_BANG_ = (function reagent$session$swap_BANG_(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64960 = arguments.length;\r\nvar i__4731__auto___64961 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64961 < len__4730__auto___64960)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64961]));\r\n\r\nvar G__64962 = (i__4731__auto___64961 + (1));\r\ni__4731__auto___64961 = G__64962;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\r\nreturn reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_,reagent.session.state,f,args);\r\n}));\r\n\r\n(reagent.session.swap_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(reagent.session.swap_BANG_.cljs$lang$applyTo = (function (seq64829){\r\nvar G__64830 = cljs.core.first(seq64829);\r\nvar seq64829__$1 = cljs.core.next(seq64829);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64830,seq64829__$1);\r\n}));\r\n\r\n/**\r\n * Remove all data from the session and start over cleanly.\r\n */\r\nreagent.session.clear_BANG_ = (function reagent$session$clear_BANG_(){\r\nreturn cljs.core.reset_BANG_(reagent.session.state,cljs.core.PersistentArrayMap.EMPTY);\r\n});\r\nreagent.session.reset_BANG_ = (function reagent$session$reset_BANG_(m){\r\nreturn cljs.core.reset_BANG_(reagent.session.state,m);\r\n});\r\n/**\r\n * Remove a key from the session\r\n */\r\nreagent.session.remove_BANG_ = (function reagent$session$remove_BANG_(k){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(reagent.session.state,cljs.core.dissoc,k);\r\n});\r\n/**\r\n * Associates a value in the session, where ks is a\r\n * sequence of keys and v is the new value and returns\r\n * a new nested structure. If any levels do not exist,\r\n * hash-maps will be created.\r\n */\r\nreagent.session.assoc_in_BANG_ = (function reagent$session$assoc_in_BANG_(ks,v){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc_in,ks,v);\r\n});\r\n/**\r\n * Destructive get from the session. This returns the current value of the key\r\n *   and then removes it from the session.\r\n */\r\nreagent.session.get_BANG_ = (function reagent$session$get_BANG_(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64970 = arguments.length;\r\nvar i__4731__auto___64971 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64971 < len__4730__auto___64970)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64971]));\r\n\r\nvar G__64972 = (i__4731__auto___64971 + (1));\r\ni__4731__auto___64971 = G__64972;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\r\nreturn reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__64858){\r\nvar vec__64860 = p__64858;\r\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64860,(0),null);\r\nvar cur = reagent.session.get.cljs$core$IFn$_invoke$arity$variadic(k,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\r\nreagent.session.remove_BANG_(k);\r\n\r\nreturn cur;\r\n}));\r\n\r\n(reagent.session.get_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(reagent.session.get_BANG_.cljs$lang$applyTo = (function (seq64850){\r\nvar G__64851 = cljs.core.first(seq64850);\r\nvar seq64850__$1 = cljs.core.next(seq64850);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64851,seq64850__$1);\r\n}));\r\n\r\n/**\r\n * Destructive get from the session. This returns the current value of the path\r\n *   specified by the vector ks and then removes it from the session.\r\n */\r\nreagent.session.get_in_BANG_ = (function reagent$session$get_in_BANG_(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64976 = arguments.length;\r\nvar i__4731__auto___64978 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64978 < len__4730__auto___64976)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64978]));\r\n\r\nvar G__64982 = (i__4731__auto___64978 + (1));\r\ni__4731__auto___64978 = G__64982;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\r\nreturn reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__64888){\r\nvar vec__64889 = p__64888;\r\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64889,(0),null);\r\nvar cur = reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic(ks,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\r\nreagent.session.assoc_in_BANG_(ks,null);\r\n\r\nreturn cur;\r\n}));\r\n\r\n(reagent.session.get_in_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(reagent.session.get_in_BANG_.cljs$lang$applyTo = (function (seq64875){\r\nvar G__64876 = cljs.core.first(seq64875);\r\nvar seq64875__$1 = cljs.core.next(seq64875);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64876,seq64875__$1);\r\n}));\r\n\r\n/**\r\n * Updates a value in session where k is a key and f\r\n * is the function that takes the old value along with any\r\n * supplied args and return the new value. If key is not\r\n * present it will be added.\r\n */\r\nreagent.session.update_BANG_ = (function reagent$session$update_BANG_(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64988 = arguments.length;\r\nvar i__4731__auto___64989 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64989 < len__4730__auto___64988)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64989]));\r\n\r\nvar G__64991 = (i__4731__auto___64989 + (1));\r\ni__4731__auto___64989 = G__64991;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\r\nreturn reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,f,args){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__64896_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update,p1__64896_SHARP_,k,f),args);\r\n}));\r\n}));\r\n\r\n(reagent.session.update_BANG_.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(reagent.session.update_BANG_.cljs$lang$applyTo = (function (seq64900){\r\nvar G__64901 = cljs.core.first(seq64900);\r\nvar seq64900__$1 = cljs.core.next(seq64900);\r\nvar G__64903 = cljs.core.first(seq64900__$1);\r\nvar seq64900__$2 = cljs.core.next(seq64900__$1);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64901,G__64903,seq64900__$2);\r\n}));\r\n\r\n/**\r\n * Updates a value in the session, where ks is a\r\n * sequence of keys and f is a function that will\r\n * take the old value along with any supplied args and return\r\n * the new value. If any levels do not exist, hash-maps\r\n * will be created.\r\n */\r\nreagent.session.update_in_BANG_ = (function reagent$session$update_in_BANG_(var_args){\r\nvar args__4736__auto__ = [];\r\nvar len__4730__auto___64994 = arguments.length;\r\nvar i__4731__auto___64995 = (0);\r\nwhile(true){\r\nif((i__4731__auto___64995 < len__4730__auto___64994)){\r\nargs__4736__auto__.push((arguments[i__4731__auto___64995]));\r\n\r\nvar G__64996 = (i__4731__auto___64995 + (1));\r\ni__4731__auto___64995 = G__64996;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\r\nreturn reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\r\n});\r\n\r\n(reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,f,args){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__64917_SHARP_){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in,p1__64917_SHARP_,ks,f),args);\r\n}));\r\n}));\r\n\r\n(reagent.session.update_in_BANG_.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(reagent.session.update_in_BANG_.cljs$lang$applyTo = (function (seq64919){\r\nvar G__64921 = cljs.core.first(seq64919);\r\nvar seq64919__$1 = cljs.core.next(seq64919);\r\nvar G__64922 = cljs.core.first(seq64919__$1);\r\nvar seq64919__$2 = cljs.core.next(seq64919__$1);\r\nvar self__4717__auto__ = this;\r\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64921,G__64922,seq64919__$2);\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/session.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$get","~$reset!","~$swap!","~$get-in"]],"~:name","~$reagent.session","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.core","^O","~$reagent","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$atom","^O"],"~:require-macros",["^ ","^Q","^Q","^O","^O","^P","^O"],"~:form",["~#list",["~$ns","^J",["^Y",["~:refer-clojure","~:exclude",["^E","^H","^F","^G"]]],["^Y",["^T",["^O","~:as","^P","~:refer",["^V"]]]]]],"~:flags",["^ ","^T",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","reagent/session.cljs"],"~:compiled-at",1589213812581,"~:resource-name","reagent/session.cljs","~:warnings",[],"~:source","(ns reagent.session\n  (:refer-clojure :exclude [get get-in reset! swap!])\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(defonce state (atom {}))\n\n(defn cursor\n  \"Returns a cursor from the state atom.\"\n  [ks]\n  (reagent/cursor state ks))\n\n(defn get\n  \"Get the key's value from the session, returns nil if it doesn't exist.\"\n  [k & [default]]\n  (let [temp-a @(cursor [k])]\n    (if-not (nil? temp-a) temp-a default)))\n\n(defn put! [k v]\n  (clojure.core/swap! state assoc k v))\n\n(defn get-in\n \"Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.\"\n  [ks & [default]]\n  (let [result @(cursor ks)]\n    (if-not (nil? result) result default)))\n\n(defn swap!\n  \"Replace the current session's value with the result of executing f with\n  the current value and args.\"\n  [f & args]\n  (apply clojure.core/swap! state f args))\n\n(defn clear!\n  \"Remove all data from the session and start over cleanly.\"\n  []\n  (clojure.core/reset! state {}))\n\n(defn reset! [m]\n  (clojure.core/reset! state m))\n\n(defn remove!\n  \"Remove a key from the session\"\n  [k]\n  (clojure.core/swap! state dissoc k))\n\n(defn assoc-in!\n  \"Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.\"\n  [ks v]\n  (clojure.core/swap! state assoc-in  ks v))\n\n(defn get!\n  \"Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.\"[k & [default]]\n  (let [cur (get k default)]\n    (remove! k)\n    cur))\n\n(defn get-in!\n  \"Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.\"\n  [ks & [default]]\n    (let [cur (get-in ks default)]\n      (assoc-in! ks nil)\n      cur))\n\n(defn update!\n  \"Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.\"\n  [k f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update % k f) args)))\n\n(defn update-in!\n  \"Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.\"\n  [ks f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update-in % ks f) args)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/reagent","js/reagent.session","js/reagent.session.state","reagent.session/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.session/cursor","ks","reagent.core/cursor","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","reagent.session/get","p__64803","vec__64804","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq64788","G__64789","cljs.core/first","cljs.core/next","self__4717__auto__","k","default","cljs.core/deref","temp-a","reagent.session/put!","v","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.session/get-in","p__64820","vec__64822","seq64810","G__64811","result","reagent.session/swap!","seq64829","G__64830","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/swap!","reagent.session/clear!","cljs.core/reset!","reagent.session/reset!","m","reagent.session/remove!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.session/assoc-in!","cljs.core/assoc-in","reagent.session/get!","p__64858","vec__64860","seq64850","G__64851","cur","reagent.session.get.cljs$core$IFn$_invoke$arity$variadic","reagent.session/get-in!","p__64888","vec__64889","seq64875","G__64876","reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic","reagent.session/update!","seq64900","G__64901","G__64903","p1__64896#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core/update","reagent.session/update-in!","seq64919","G__64921","G__64922","p1__64917#","cljs.core/update-in"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1589208783000,1589208783000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^17","reagent/impl/batching.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","~$reagent.debug","~$reagent.impl.util"]]],["~:macro","^Q"],[1589208773000],["^17","goog/math/math.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.array","~$goog.asserts"]]],["^1N","^1L"],[1589208780000],["^17","goog/array/array.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1P"]]],["^1D","node_modules/prop-types/checkPropTypes.js"],[1589208783000,1589208783000,1549836454000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^17","reagent/impl/util.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","~$clojure.string"]]],["^17","goog/debug/error.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/dom/nodetype.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1N","^O"],[1589208780000],["^1D","node_modules/scheduler/cjs/scheduler.development.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","reagent/ratom.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1M","^1L","~$reagent.impl.batching","~$clojure.set","~$goog.object"]]],["^1D","node_modules/scheduler/cjs/scheduler.production.min.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/react/index.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^17","shadow/js.js"],[1589208783382,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/object/object.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/template.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","^1R","~$clojure.walk","^1M","~$reagent.impl.component","^1S","~$reagent.ratom","^1L","^1U"]]],["^1D","node_modules/react-dom/cjs/react-dom.production.min.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1589208783000,1589208773000],["^1D","node_modules/react/cjs/react.development.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1[","~$module$node_modules$prop_types$checkPropTypes"]]],["^1N","^1Z"],[1589208780000],["^17","goog/math/long.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1P","~$goog.reflect"]]],["^17","goog/string/internal.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/functions/functions.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/component.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1U","^?","^1M","^1S","^1Z","^1L"]]],["^17","clojure/walk.cljs"],[1589208773847,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/structs/map.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","node_modules/scheduler/index.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^17","goog/asserts/asserts.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","node_modules/object-assign/index.js"],[1589208783000,1589208783000,1484580833000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/base.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1U"]]],["^17","clojure/string.cljs"],[1589208773847,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^2:","~$goog.string.StringBuffer"]]],["^1D","node_modules/react/cjs/react.production.min.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1["]]],["^17","goog/string/string.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.string.internal"]]],["^17","goog/reflect/reflect.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/core.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","~$reagent.impl.template","^1Y","^1M","^1S","^1Z","^1L","~$reagent.dom"]]],["^17","reagent/session.cljs"],[1589208780828,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^O"]]],["^17","goog/string/stringbuffer.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/iter/iter.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","~$goog.functions","~$goog.math"]]],["^17","reagent/dom.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^A","^1M","^2B","^1S","^1Z"]]],["^1D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1589208783000,1589208783000,1549571078000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","cljs/core.cljs"],[1589208773847,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^2:","^1U","^1O","~$goog.Uri","^2@"]]],["^17","reagent/debug.cljs"],[1589208780811,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/math/integer.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/tracing.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1D","node_modules/react-dom/cjs/react-dom.development.js"],[1589208783000,1589208783000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","^1[","^20","^22","~$module$node_modules$scheduler$tracing"]]],["^17","clojure/set.cljs"],[1589208773847,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/uri/utils.js"],[1589208774923,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","^1P","^2:"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/session.cljs","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",["^E","^F","^G","^H"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^D",["^T"]],"^U",["^ ","^V","^O"],"~:defs",["^ ","~$assoc-in!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/session.cljs","^7",47,"^8",7,"^9",47,"^:",16,"~:arglists",["^Y",["~$quote",["^Y",[["~$ks","~$v"]]]]],"~:doc","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"^I","~$reagent.session/assoc-in!","^6","reagent/session.cljs","^:",16,"~:method-params",["^Y",[["^2R","~$v"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"~:variadic?",false,"^7",47,"~:ret-tag",["^D",[null,"~$any"]],"^9",47,"~:max-fixed-arity",2,"~:fn-var",true,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$v"]]]]],"^2S","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"~$remove!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",42,"^8",7,"^9",42,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["~$k"]]]]],"^2S","Remove a key from the session"],"^I","~$reagent.session/remove!","^6","reagent/session.cljs","^:",14,"^2U",["^Y",[["~$k"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",42,"^2Y",["^D",[null,"^2Z"]],"^9",42,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$k"]]]]],"^2S","Remove a key from the session"],"~$update-in!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",80,"^8",7,"^9",80,"^:",17,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$f","~$&","~$args"]]]]],"^2S","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.","~:top-fn",["^ ","^2X",true,"~:fixed-arity",2,"^2[",2,"^2U",[["^Y",["^2R","~$f","^34"]]],"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/update-in!","^6","reagent/session.cljs","^:",17,"^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["^2R","~$f","^34"]]],"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R","~$f","^34"]]],"^2V",null,"^36",2,"^2W",["^Y",[null]],"^8",1,"^2X",true,"~:methods",[["^ ","^36",2,"^2X",true,"~:tag",["^D",[null,"^2Z"]]]],"^7",80,"^2Y","^2Z","^9",80,"^2[",2,"^30",true,"^2P",["^Y",[["^2R","~$f","~$&","^34"]]],"^2S","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created."],"~$get-in!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",62,"^8",7,"^9",62,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$&",["~$default"]]]]]],"^2S","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get-in!","^6","reagent/session.cljs","^:",14,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","~$clj-nil"]]]],"^7",62,"^2Y","^2Z","^9",62,"^2[",1,"^30",true,"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2S","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session."],"^E",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",12,"^8",7,"^9",12,"^:",10,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$&",["^3;"]]]]]],"^2S","Get the key's value from the session, returns nil if it doesn't exist.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get","^6","reagent/session.cljs","^:",10,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",12,"^2Y","^2Z","^9",12,"^2[",1,"^30",true,"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2S","Get the key's value from the session, returns nil if it doesn't exist."],"^F",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["~$m"]]]]]],"^I","~$reagent.session/reset!","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[["~$m"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",39,"^2Y",["^D",[null,"^2Z"]],"^9",39,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$m"]]]]]],"~$cursor",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",7,"^8",7,"^9",7,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["^2R"]]]]],"^2S","Returns a cursor from the state atom."],"^I","~$reagent.session/cursor","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[["^2R"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",7,"^2Y","~$reagent.ratom/RCursor","^9",7,"^2[",1,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["^2R"]]]]],"^2S","Returns a cursor from the state atom."],"~$get!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",55,"^8",7,"^9",55,"^:",11,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$&",["^3;"]]]]]],"^2S","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get!","^6","reagent/session.cljs","^:",11,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$k",["^3;"]]]],"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",55,"^2Y","^2Z","^9",55,"^2[",1,"^30",true,"^2P",["^Y",[["~$k","~$&",["^3;"]]]],"^2S","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session."],"~$state",["^ ","^I","~$reagent.session/state","^6","reagent/session.cljs","^7",5,"^8",1,"^9",5,"^:",15,"^5",["^ ","^6","reagent/session.cljs","^7",5,"^8",10,"^9",5,"^:",15],"^39","~$reagent.ratom/RAtom"],"^G",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",28,"^8",7,"^9",28,"^:",12,"^2P",["^Y",["^2Q",["^Y",[["~$f","~$&","^34"]]]]],"^2S","Replace the current session's value with the result of executing f with\n  the current value and args.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$f","^34"]]],"^2P",["^Y",[["~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/swap!","^6","reagent/session.cljs","^:",12,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["~$f","^34"]]],"^2P",["^Y",[["~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$f","^34"]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39","^2Z"]],"^7",28,"^2Y","^2Z","^9",28,"^2[",1,"^30",true,"^2P",["^Y",[["~$f","~$&","^34"]]],"^2S","Replace the current session's value with the result of executing f with\n  the current value and args."],"~$clear!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",34,"^8",7,"^9",34,"^:",13,"^2P",["^Y",["^2Q",["^Y",[[]]]]],"^2S","Remove all data from the session and start over cleanly."],"^I","~$reagent.session/clear!","^6","reagent/session.cljs","^:",13,"^2U",["^Y",[[]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",34,"^2Y",["^D",[null,"^2Z"]],"^9",34,"^2[",0,"^30",true,"^2P",["^Y",["^2Q",["^Y",[[]]]]],"^2S","Remove all data from the session and start over cleanly."],"~$update!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",70,"^8",7,"^9",70,"^:",14,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$f","~$&","^34"]]]]],"^2S","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.","^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["~$k","~$f","^34"]]],"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/update!","^6","reagent/session.cljs","^:",14,"^35",["^ ","^2X",true,"^36",2,"^2[",2,"^2U",[["^Y",["~$k","~$f","^34"]]],"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["~$k","~$f","^34"]]],"^2V",null,"^36",2,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",2,"^2X",true,"^39",["^D",[null,"^2Z"]]]],"^7",70,"^2Y","^2Z","^9",70,"^2[",2,"^30",true,"^2P",["^Y",[["~$k","~$f","~$&","^34"]]],"^2S","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added."],"~$put!",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",18,"^8",7,"^9",18,"^:",11,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$v"]]]]]],"^I","~$reagent.session/put!","^6","reagent/session.cljs","^:",11,"^2U",["^Y",[["~$k","~$v"]]],"^2V",null,"^2W",["^Y",[null,null]],"^8",1,"^2X",false,"^7",18,"^2Y",["^D",[null,"^2Z"]],"^9",18,"^2[",2,"^30",true,"^2P",["^Y",["^2Q",["^Y",[["~$k","~$v"]]]]]],"^H",["^ ","^2O",null,"^5",["^ ","^6","reagent/session.cljs","^7",21,"^8",7,"^9",21,"^:",13,"^2P",["^Y",["^2Q",["^Y",[["^2R","~$&",["^3;"]]]]]],"^2S","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.","^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]]],"^I","~$reagent.session/get-in","^6","reagent/session.cljs","^:",13,"^35",["^ ","^2X",true,"^36",1,"^2[",1,"^2U",[["^Y",["^2R",["^3;"]]]],"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2W",["^Y",[null]]],"^2U",[["^Y",["^2R",["^3;"]]]],"^2V",null,"^36",1,"^2W",["^Y",[null]],"^8",1,"^2X",true,"^38",[["^ ","^36",1,"^2X",true,"^39",["^D",[null,"^2Z","^3="]]]],"^7",21,"^2Y","^2Z","^9",21,"^2[",1,"^30",true,"^2P",["^Y",[["^2R","~$&",["^3;"]]]],"^2S","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist."]],"^W",["^ ","^Q","^Q","^O","^O","^P","^O"],"^13",["^ ","^T",["^D",[]]],"^14",["^ "],"^15",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^3R","~:static-fns"],true,["^3R","~:elide-asserts"],false,["^3R","~:optimize-constants"],null,["^3R","^1:"],null,["^3R","~:external-config"],null,["^3R","~:tooling-config"],null,["^3R","~:emit-constants"],null,["^3R","~:load-tests"],null,["^3R","~:infer-externs"],true,["^3R","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3R","~:fn-invoke-direct"],null,["^3R","~:source-map"],"/dev/null"]]]